Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> program declaration Semi
Rule 4     program -> empty
Rule 5     type -> Int
Rule 6     function -> type Identifier LParen paramlist RParen LBrace block RBrace
Rule 7     function -> type Identifier LParen paramlist RParen Semi
Rule 8     paramlist -> paramlist Comma type Identifier
Rule 9     paramlist -> empty
Rule 10    paramlist -> type Identifier
Rule 11    block -> block block_item
Rule 12    block -> empty
Rule 13    block_item -> statement
Rule 14    block_item -> declaration Semi
Rule 15    statement -> statement_matched
Rule 16    statement -> statement_unmatched
Rule 17    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 18    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 19    statement_unmatched -> If LParen expression RParen statement
Rule 20    statement_matched -> While LParen expression RParen statement_matched
Rule 21    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 22    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 23    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 24    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 25    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 26    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 27    statement_matched -> Return expression Semi
Rule 28    statement_matched -> opt_expression Semi
Rule 29    statement_matched -> LBrace block RBrace
Rule 30    statement_matched -> Break Semi
Rule 31    statement_matched -> Continue Semi
Rule 32    opt_expression -> expression
Rule 33    opt_expression -> empty
Rule 34    declaration -> type Identifier
Rule 35    declaration -> type Identifier Assign expression
Rule 36    expression -> assignment
Rule 37    assignment -> conditional
Rule 38    conditional -> logical_or
Rule 39    logical_or -> logical_and
Rule 40    logical_and -> bit_or
Rule 41    bit_or -> xor
Rule 42    xor -> bit_and
Rule 43    bit_and -> equality
Rule 44    equality -> relational
Rule 45    relational -> additive
Rule 46    additive -> multiplicative
Rule 47    multiplicative -> unary
Rule 48    unary -> postfix
Rule 49    postfix -> primary
Rule 50    unary -> Minus unary
Rule 51    unary -> BitNot unary
Rule 52    unary -> Not unary
Rule 53    postfix -> Identifier LParen expression_list RParen
Rule 54    expression_list -> expression_list Comma expression
Rule 55    expression_list -> empty
Rule 56    expression_list -> expression
Rule 57    assignment -> Identifier Assign expression
Rule 58    logical_or -> logical_or Or logical_and
Rule 59    logical_and -> logical_and And bit_or
Rule 60    bit_or -> bit_or BitOr xor
Rule 61    xor -> xor Xor bit_and
Rule 62    bit_and -> bit_and BitAnd equality
Rule 63    equality -> equality NotEqual relational
Rule 64    equality -> equality Equal relational
Rule 65    relational -> relational Less additive
Rule 66    relational -> relational Greater additive
Rule 67    relational -> relational LessEqual additive
Rule 68    relational -> relational GreaterEqual additive
Rule 69    additive -> additive Plus multiplicative
Rule 70    additive -> additive Minus multiplicative
Rule 71    multiplicative -> multiplicative Mul unary
Rule 72    multiplicative -> multiplicative Div unary
Rule 73    multiplicative -> multiplicative Mod unary
Rule 74    conditional -> logical_or Question expression Colon conditional
Rule 75    primary -> Integer
Rule 76    primary -> Identifier
Rule 77    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 59
Assign               : 35 57
BitAnd               : 62
BitNot               : 51
BitOr                : 60
Break                : 30
Colon                : 74
Comma                : 8 54
Continue             : 31
Div                  : 72
Do                   : 26
Else                 : 17 18
Equal                : 64
For                  : 22 23 24 25
Greater              : 66
GreaterEqual         : 68
Identifier           : 6 7 8 10 34 35 53 57 76
If                   : 17 18 19
Int                  : 5
Integer              : 75
LBrace               : 6 29
LParen               : 6 7 17 18 19 20 21 22 23 24 25 26 53 77
Less                 : 65
LessEqual            : 67
Minus                : 50 70
Mod                  : 73
Mul                  : 71
Not                  : 52
NotEqual             : 63
Or                   : 58
Plus                 : 69
Question             : 74
RBrace               : 6 29
RParen               : 6 7 17 18 19 20 21 22 23 24 25 26 53 77
Return               : 27
Semi                 : 3 7 14 22 22 23 23 24 24 25 25 26 27 28 30 31
While                : 20 21 26
Xor                  : 61
error                : 

Nonterminals, with rules where they appear

additive             : 45 65 66 67 68 69 70
assignment           : 36
bit_and              : 42 61 62
bit_or               : 40 59 60
block                : 6 11 29
block_item           : 11
conditional          : 37 74
declaration          : 3 14 23 25
empty                : 4 9 12 33 55
equality             : 43 62 63 64
expression           : 17 18 19 20 21 26 27 32 35 54 56 57 74 77
expression_list      : 53 54
function             : 2
logical_and          : 39 58 59
logical_or           : 38 58 74
multiplicative       : 46 69 70 71 72 73
opt_expression       : 22 22 22 23 23 24 24 24 25 25 28
paramlist            : 6 7 8
postfix              : 48
primary              : 49
program              : 2 3 0
relational           : 44 63 64 65 66 67 68
statement            : 13 19
statement_matched    : 15 17 17 18 20 22 23 26
statement_unmatched  : 16 18 21 24 25
type                 : 6 7 8 10 34 35
unary                : 47 50 51 52 71 72 73
xor                  : 41 60 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . program declaration Semi
    (4) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (3) program -> program . declaration Semi
    (6) function -> . type Identifier LParen paramlist RParen LBrace block RBrace
    (7) function -> . type Identifier LParen paramlist RParen Semi
    (34) declaration -> . type Identifier
    (35) declaration -> . type Identifier Assign expression
    (5) type -> . Int

    Int             shift and go to state 6

    function                       shift and go to state 3
    declaration                    shift and go to state 4
    type                           shift and go to state 5

state 2

    (4) program -> empty .

    Int             reduce using rule 4 (program -> empty .)
    $end            reduce using rule 4 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (3) program -> program declaration . Semi

    Semi            shift and go to state 7


state 5

    (6) function -> type . Identifier LParen paramlist RParen LBrace block RBrace
    (7) function -> type . Identifier LParen paramlist RParen Semi
    (34) declaration -> type . Identifier
    (35) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 8


state 6

    (5) type -> Int .

    Identifier      reduce using rule 5 (type -> Int .)


state 7

    (3) program -> program declaration Semi .

    Int             reduce using rule 3 (program -> program declaration Semi .)
    $end            reduce using rule 3 (program -> program declaration Semi .)


state 8

    (6) function -> type Identifier . LParen paramlist RParen LBrace block RBrace
    (7) function -> type Identifier . LParen paramlist RParen Semi
    (34) declaration -> type Identifier .
    (35) declaration -> type Identifier . Assign expression

    LParen          shift and go to state 9
    Semi            reduce using rule 34 (declaration -> type Identifier .)
    Assign          shift and go to state 10


state 9

    (6) function -> type Identifier LParen . paramlist RParen LBrace block RBrace
    (7) function -> type Identifier LParen . paramlist RParen Semi
    (8) paramlist -> . paramlist Comma type Identifier
    (9) paramlist -> . empty
    (10) paramlist -> . type Identifier
    (1) empty -> .
    (5) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    type                           shift and go to state 11
    paramlist                      shift and go to state 12
    empty                          shift and go to state 13

state 10

    (35) declaration -> type Identifier Assign . expression
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 15
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 11

    (10) paramlist -> type . Identifier

    Identifier      shift and go to state 35


state 12

    (6) function -> type Identifier LParen paramlist . RParen LBrace block RBrace
    (7) function -> type Identifier LParen paramlist . RParen Semi
    (8) paramlist -> paramlist . Comma type Identifier

    RParen          shift and go to state 36
    Comma           shift and go to state 37


state 13

    (9) paramlist -> empty .

    RParen          reduce using rule 9 (paramlist -> empty .)
    Comma           reduce using rule 9 (paramlist -> empty .)


state 14

    (57) assignment -> Identifier . Assign expression
    (53) postfix -> Identifier . LParen expression_list RParen
    (76) primary -> Identifier .

    Assign          shift and go to state 38
    LParen          shift and go to state 39
    Mul             reduce using rule 76 (primary -> Identifier .)
    Div             reduce using rule 76 (primary -> Identifier .)
    Mod             reduce using rule 76 (primary -> Identifier .)
    Plus            reduce using rule 76 (primary -> Identifier .)
    Minus           reduce using rule 76 (primary -> Identifier .)
    Less            reduce using rule 76 (primary -> Identifier .)
    Greater         reduce using rule 76 (primary -> Identifier .)
    LessEqual       reduce using rule 76 (primary -> Identifier .)
    GreaterEqual    reduce using rule 76 (primary -> Identifier .)
    NotEqual        reduce using rule 76 (primary -> Identifier .)
    Equal           reduce using rule 76 (primary -> Identifier .)
    BitAnd          reduce using rule 76 (primary -> Identifier .)
    Xor             reduce using rule 76 (primary -> Identifier .)
    BitOr           reduce using rule 76 (primary -> Identifier .)
    And             reduce using rule 76 (primary -> Identifier .)
    Question        reduce using rule 76 (primary -> Identifier .)
    Or              reduce using rule 76 (primary -> Identifier .)
    Semi            reduce using rule 76 (primary -> Identifier .)
    RParen          reduce using rule 76 (primary -> Identifier .)
    Comma           reduce using rule 76 (primary -> Identifier .)
    Colon           reduce using rule 76 (primary -> Identifier .)


state 15

    (35) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 35 (declaration -> type Identifier Assign expression .)


state 16

    (36) expression -> assignment .

    Semi            reduce using rule 36 (expression -> assignment .)
    RParen          reduce using rule 36 (expression -> assignment .)
    Comma           reduce using rule 36 (expression -> assignment .)
    Colon           reduce using rule 36 (expression -> assignment .)


state 17

    (37) assignment -> conditional .

    Semi            reduce using rule 37 (assignment -> conditional .)
    RParen          reduce using rule 37 (assignment -> conditional .)
    Comma           reduce using rule 37 (assignment -> conditional .)
    Colon           reduce using rule 37 (assignment -> conditional .)


state 18

    (38) conditional -> logical_or .
    (74) conditional -> logical_or . Question expression Colon conditional
    (58) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 38 (conditional -> logical_or .)
    RParen          reduce using rule 38 (conditional -> logical_or .)
    Comma           reduce using rule 38 (conditional -> logical_or .)
    Colon           reduce using rule 38 (conditional -> logical_or .)
    Question        shift and go to state 40
    Or              shift and go to state 41


state 19

    (39) logical_or -> logical_and .
    (59) logical_and -> logical_and . And bit_or

    Question        reduce using rule 39 (logical_or -> logical_and .)
    Or              reduce using rule 39 (logical_or -> logical_and .)
    Semi            reduce using rule 39 (logical_or -> logical_and .)
    RParen          reduce using rule 39 (logical_or -> logical_and .)
    Comma           reduce using rule 39 (logical_or -> logical_and .)
    Colon           reduce using rule 39 (logical_or -> logical_and .)
    And             shift and go to state 42


state 20

    (40) logical_and -> bit_or .
    (60) bit_or -> bit_or . BitOr xor

    And             reduce using rule 40 (logical_and -> bit_or .)
    Question        reduce using rule 40 (logical_and -> bit_or .)
    Or              reduce using rule 40 (logical_and -> bit_or .)
    Semi            reduce using rule 40 (logical_and -> bit_or .)
    RParen          reduce using rule 40 (logical_and -> bit_or .)
    Comma           reduce using rule 40 (logical_and -> bit_or .)
    Colon           reduce using rule 40 (logical_and -> bit_or .)
    BitOr           shift and go to state 43


state 21

    (41) bit_or -> xor .
    (61) xor -> xor . Xor bit_and

    BitOr           reduce using rule 41 (bit_or -> xor .)
    And             reduce using rule 41 (bit_or -> xor .)
    Question        reduce using rule 41 (bit_or -> xor .)
    Or              reduce using rule 41 (bit_or -> xor .)
    Semi            reduce using rule 41 (bit_or -> xor .)
    RParen          reduce using rule 41 (bit_or -> xor .)
    Comma           reduce using rule 41 (bit_or -> xor .)
    Colon           reduce using rule 41 (bit_or -> xor .)
    Xor             shift and go to state 44


state 22

    (42) xor -> bit_and .
    (62) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 42 (xor -> bit_and .)
    BitOr           reduce using rule 42 (xor -> bit_and .)
    And             reduce using rule 42 (xor -> bit_and .)
    Question        reduce using rule 42 (xor -> bit_and .)
    Or              reduce using rule 42 (xor -> bit_and .)
    Semi            reduce using rule 42 (xor -> bit_and .)
    RParen          reduce using rule 42 (xor -> bit_and .)
    Comma           reduce using rule 42 (xor -> bit_and .)
    Colon           reduce using rule 42 (xor -> bit_and .)
    BitAnd          shift and go to state 45


state 23

    (43) bit_and -> equality .
    (63) equality -> equality . NotEqual relational
    (64) equality -> equality . Equal relational

    BitAnd          reduce using rule 43 (bit_and -> equality .)
    Xor             reduce using rule 43 (bit_and -> equality .)
    BitOr           reduce using rule 43 (bit_and -> equality .)
    And             reduce using rule 43 (bit_and -> equality .)
    Question        reduce using rule 43 (bit_and -> equality .)
    Or              reduce using rule 43 (bit_and -> equality .)
    Semi            reduce using rule 43 (bit_and -> equality .)
    RParen          reduce using rule 43 (bit_and -> equality .)
    Comma           reduce using rule 43 (bit_and -> equality .)
    Colon           reduce using rule 43 (bit_and -> equality .)
    NotEqual        shift and go to state 46
    Equal           shift and go to state 47


state 24

    (44) equality -> relational .
    (65) relational -> relational . Less additive
    (66) relational -> relational . Greater additive
    (67) relational -> relational . LessEqual additive
    (68) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 44 (equality -> relational .)
    Equal           reduce using rule 44 (equality -> relational .)
    BitAnd          reduce using rule 44 (equality -> relational .)
    Xor             reduce using rule 44 (equality -> relational .)
    BitOr           reduce using rule 44 (equality -> relational .)
    And             reduce using rule 44 (equality -> relational .)
    Question        reduce using rule 44 (equality -> relational .)
    Or              reduce using rule 44 (equality -> relational .)
    Semi            reduce using rule 44 (equality -> relational .)
    RParen          reduce using rule 44 (equality -> relational .)
    Comma           reduce using rule 44 (equality -> relational .)
    Colon           reduce using rule 44 (equality -> relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 25

    (45) relational -> additive .
    (69) additive -> additive . Plus multiplicative
    (70) additive -> additive . Minus multiplicative

    Less            reduce using rule 45 (relational -> additive .)
    Greater         reduce using rule 45 (relational -> additive .)
    LessEqual       reduce using rule 45 (relational -> additive .)
    GreaterEqual    reduce using rule 45 (relational -> additive .)
    NotEqual        reduce using rule 45 (relational -> additive .)
    Equal           reduce using rule 45 (relational -> additive .)
    BitAnd          reduce using rule 45 (relational -> additive .)
    Xor             reduce using rule 45 (relational -> additive .)
    BitOr           reduce using rule 45 (relational -> additive .)
    And             reduce using rule 45 (relational -> additive .)
    Question        reduce using rule 45 (relational -> additive .)
    Or              reduce using rule 45 (relational -> additive .)
    Semi            reduce using rule 45 (relational -> additive .)
    RParen          reduce using rule 45 (relational -> additive .)
    Comma           reduce using rule 45 (relational -> additive .)
    Colon           reduce using rule 45 (relational -> additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 26

    (46) additive -> multiplicative .
    (71) multiplicative -> multiplicative . Mul unary
    (72) multiplicative -> multiplicative . Div unary
    (73) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 46 (additive -> multiplicative .)
    Minus           reduce using rule 46 (additive -> multiplicative .)
    Less            reduce using rule 46 (additive -> multiplicative .)
    Greater         reduce using rule 46 (additive -> multiplicative .)
    LessEqual       reduce using rule 46 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 46 (additive -> multiplicative .)
    NotEqual        reduce using rule 46 (additive -> multiplicative .)
    Equal           reduce using rule 46 (additive -> multiplicative .)
    BitAnd          reduce using rule 46 (additive -> multiplicative .)
    Xor             reduce using rule 46 (additive -> multiplicative .)
    BitOr           reduce using rule 46 (additive -> multiplicative .)
    And             reduce using rule 46 (additive -> multiplicative .)
    Question        reduce using rule 46 (additive -> multiplicative .)
    Or              reduce using rule 46 (additive -> multiplicative .)
    Semi            reduce using rule 46 (additive -> multiplicative .)
    RParen          reduce using rule 46 (additive -> multiplicative .)
    Comma           reduce using rule 46 (additive -> multiplicative .)
    Colon           reduce using rule 46 (additive -> multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 27

    (50) unary -> Minus . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 57
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 28

    (47) multiplicative -> unary .

    Mul             reduce using rule 47 (multiplicative -> unary .)
    Div             reduce using rule 47 (multiplicative -> unary .)
    Mod             reduce using rule 47 (multiplicative -> unary .)
    Plus            reduce using rule 47 (multiplicative -> unary .)
    Minus           reduce using rule 47 (multiplicative -> unary .)
    Less            reduce using rule 47 (multiplicative -> unary .)
    Greater         reduce using rule 47 (multiplicative -> unary .)
    LessEqual       reduce using rule 47 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 47 (multiplicative -> unary .)
    NotEqual        reduce using rule 47 (multiplicative -> unary .)
    Equal           reduce using rule 47 (multiplicative -> unary .)
    BitAnd          reduce using rule 47 (multiplicative -> unary .)
    Xor             reduce using rule 47 (multiplicative -> unary .)
    BitOr           reduce using rule 47 (multiplicative -> unary .)
    And             reduce using rule 47 (multiplicative -> unary .)
    Question        reduce using rule 47 (multiplicative -> unary .)
    Or              reduce using rule 47 (multiplicative -> unary .)
    Semi            reduce using rule 47 (multiplicative -> unary .)
    RParen          reduce using rule 47 (multiplicative -> unary .)
    Comma           reduce using rule 47 (multiplicative -> unary .)
    Colon           reduce using rule 47 (multiplicative -> unary .)


state 29

    (48) unary -> postfix .

    Mul             reduce using rule 48 (unary -> postfix .)
    Div             reduce using rule 48 (unary -> postfix .)
    Mod             reduce using rule 48 (unary -> postfix .)
    Plus            reduce using rule 48 (unary -> postfix .)
    Minus           reduce using rule 48 (unary -> postfix .)
    Less            reduce using rule 48 (unary -> postfix .)
    Greater         reduce using rule 48 (unary -> postfix .)
    LessEqual       reduce using rule 48 (unary -> postfix .)
    GreaterEqual    reduce using rule 48 (unary -> postfix .)
    NotEqual        reduce using rule 48 (unary -> postfix .)
    Equal           reduce using rule 48 (unary -> postfix .)
    BitAnd          reduce using rule 48 (unary -> postfix .)
    Xor             reduce using rule 48 (unary -> postfix .)
    BitOr           reduce using rule 48 (unary -> postfix .)
    And             reduce using rule 48 (unary -> postfix .)
    Question        reduce using rule 48 (unary -> postfix .)
    Or              reduce using rule 48 (unary -> postfix .)
    Semi            reduce using rule 48 (unary -> postfix .)
    RParen          reduce using rule 48 (unary -> postfix .)
    Comma           reduce using rule 48 (unary -> postfix .)
    Colon           reduce using rule 48 (unary -> postfix .)


state 30

    (51) unary -> BitNot . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 59
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 31

    (52) unary -> Not . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 60
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 32

    (49) postfix -> primary .

    Mul             reduce using rule 49 (postfix -> primary .)
    Div             reduce using rule 49 (postfix -> primary .)
    Mod             reduce using rule 49 (postfix -> primary .)
    Plus            reduce using rule 49 (postfix -> primary .)
    Minus           reduce using rule 49 (postfix -> primary .)
    Less            reduce using rule 49 (postfix -> primary .)
    Greater         reduce using rule 49 (postfix -> primary .)
    LessEqual       reduce using rule 49 (postfix -> primary .)
    GreaterEqual    reduce using rule 49 (postfix -> primary .)
    NotEqual        reduce using rule 49 (postfix -> primary .)
    Equal           reduce using rule 49 (postfix -> primary .)
    BitAnd          reduce using rule 49 (postfix -> primary .)
    Xor             reduce using rule 49 (postfix -> primary .)
    BitOr           reduce using rule 49 (postfix -> primary .)
    And             reduce using rule 49 (postfix -> primary .)
    Question        reduce using rule 49 (postfix -> primary .)
    Or              reduce using rule 49 (postfix -> primary .)
    Semi            reduce using rule 49 (postfix -> primary .)
    RParen          reduce using rule 49 (postfix -> primary .)
    Comma           reduce using rule 49 (postfix -> primary .)
    Colon           reduce using rule 49 (postfix -> primary .)


state 33

    (77) primary -> LParen . expression RParen
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 61
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 34

    (75) primary -> Integer .

    Mul             reduce using rule 75 (primary -> Integer .)
    Div             reduce using rule 75 (primary -> Integer .)
    Mod             reduce using rule 75 (primary -> Integer .)
    Plus            reduce using rule 75 (primary -> Integer .)
    Minus           reduce using rule 75 (primary -> Integer .)
    Less            reduce using rule 75 (primary -> Integer .)
    Greater         reduce using rule 75 (primary -> Integer .)
    LessEqual       reduce using rule 75 (primary -> Integer .)
    GreaterEqual    reduce using rule 75 (primary -> Integer .)
    NotEqual        reduce using rule 75 (primary -> Integer .)
    Equal           reduce using rule 75 (primary -> Integer .)
    BitAnd          reduce using rule 75 (primary -> Integer .)
    Xor             reduce using rule 75 (primary -> Integer .)
    BitOr           reduce using rule 75 (primary -> Integer .)
    And             reduce using rule 75 (primary -> Integer .)
    Question        reduce using rule 75 (primary -> Integer .)
    Or              reduce using rule 75 (primary -> Integer .)
    Semi            reduce using rule 75 (primary -> Integer .)
    RParen          reduce using rule 75 (primary -> Integer .)
    Comma           reduce using rule 75 (primary -> Integer .)
    Colon           reduce using rule 75 (primary -> Integer .)


state 35

    (10) paramlist -> type Identifier .

    RParen          reduce using rule 10 (paramlist -> type Identifier .)
    Comma           reduce using rule 10 (paramlist -> type Identifier .)


state 36

    (6) function -> type Identifier LParen paramlist RParen . LBrace block RBrace
    (7) function -> type Identifier LParen paramlist RParen . Semi

    LBrace          shift and go to state 62
    Semi            shift and go to state 63


state 37

    (8) paramlist -> paramlist Comma . type Identifier
    (5) type -> . Int

    Int             shift and go to state 6

    type                           shift and go to state 64

state 38

    (57) assignment -> Identifier Assign . expression
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 65
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 39

    (53) postfix -> Identifier LParen . expression_list RParen
    (54) expression_list -> . expression_list Comma expression
    (55) expression_list -> . empty
    (56) expression_list -> . expression
    (1) empty -> .
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression_list                shift and go to state 66
    expression                     shift and go to state 67
    empty                          shift and go to state 68
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 40

    (74) conditional -> logical_or Question . expression Colon conditional
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_or                     shift and go to state 18
    expression                     shift and go to state 69
    conditional                    shift and go to state 17
    assignment                     shift and go to state 16
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 41

    (58) logical_or -> logical_or Or . logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_and                    shift and go to state 70
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 42

    (59) logical_and -> logical_and And . bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    bit_or                         shift and go to state 71
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 43

    (60) bit_or -> bit_or BitOr . xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    xor                            shift and go to state 72
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 44

    (61) xor -> xor Xor . bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    bit_and                        shift and go to state 73
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 45

    (62) bit_and -> bit_and BitAnd . equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    equality                       shift and go to state 74
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 46

    (63) equality -> equality NotEqual . relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    relational                     shift and go to state 75
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 47

    (64) equality -> equality Equal . relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    relational                     shift and go to state 76
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 48

    (65) relational -> relational Less . additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 77
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 49

    (66) relational -> relational Greater . additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 78
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 50

    (67) relational -> relational LessEqual . additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 79
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 51

    (68) relational -> relational GreaterEqual . additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 52

    (69) additive -> additive Plus . multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    multiplicative                 shift and go to state 81
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 53

    (70) additive -> additive Minus . multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    multiplicative                 shift and go to state 82
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 54

    (71) multiplicative -> multiplicative Mul . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 83
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 55

    (72) multiplicative -> multiplicative Div . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 84
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 56

    (73) multiplicative -> multiplicative Mod . unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    unary                          shift and go to state 85
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 57

    (50) unary -> Minus unary .

    Mul             reduce using rule 50 (unary -> Minus unary .)
    Div             reduce using rule 50 (unary -> Minus unary .)
    Mod             reduce using rule 50 (unary -> Minus unary .)
    Plus            reduce using rule 50 (unary -> Minus unary .)
    Minus           reduce using rule 50 (unary -> Minus unary .)
    Less            reduce using rule 50 (unary -> Minus unary .)
    Greater         reduce using rule 50 (unary -> Minus unary .)
    LessEqual       reduce using rule 50 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 50 (unary -> Minus unary .)
    NotEqual        reduce using rule 50 (unary -> Minus unary .)
    Equal           reduce using rule 50 (unary -> Minus unary .)
    BitAnd          reduce using rule 50 (unary -> Minus unary .)
    Xor             reduce using rule 50 (unary -> Minus unary .)
    BitOr           reduce using rule 50 (unary -> Minus unary .)
    And             reduce using rule 50 (unary -> Minus unary .)
    Question        reduce using rule 50 (unary -> Minus unary .)
    Or              reduce using rule 50 (unary -> Minus unary .)
    Semi            reduce using rule 50 (unary -> Minus unary .)
    RParen          reduce using rule 50 (unary -> Minus unary .)
    Comma           reduce using rule 50 (unary -> Minus unary .)
    Colon           reduce using rule 50 (unary -> Minus unary .)


state 58

    (53) postfix -> Identifier . LParen expression_list RParen
    (76) primary -> Identifier .

    LParen          shift and go to state 39
    Mul             reduce using rule 76 (primary -> Identifier .)
    Div             reduce using rule 76 (primary -> Identifier .)
    Mod             reduce using rule 76 (primary -> Identifier .)
    Plus            reduce using rule 76 (primary -> Identifier .)
    Minus           reduce using rule 76 (primary -> Identifier .)
    Less            reduce using rule 76 (primary -> Identifier .)
    Greater         reduce using rule 76 (primary -> Identifier .)
    LessEqual       reduce using rule 76 (primary -> Identifier .)
    GreaterEqual    reduce using rule 76 (primary -> Identifier .)
    NotEqual        reduce using rule 76 (primary -> Identifier .)
    Equal           reduce using rule 76 (primary -> Identifier .)
    BitAnd          reduce using rule 76 (primary -> Identifier .)
    Xor             reduce using rule 76 (primary -> Identifier .)
    BitOr           reduce using rule 76 (primary -> Identifier .)
    And             reduce using rule 76 (primary -> Identifier .)
    Question        reduce using rule 76 (primary -> Identifier .)
    Or              reduce using rule 76 (primary -> Identifier .)
    Semi            reduce using rule 76 (primary -> Identifier .)
    RParen          reduce using rule 76 (primary -> Identifier .)
    Comma           reduce using rule 76 (primary -> Identifier .)
    Colon           reduce using rule 76 (primary -> Identifier .)


state 59

    (51) unary -> BitNot unary .

    Mul             reduce using rule 51 (unary -> BitNot unary .)
    Div             reduce using rule 51 (unary -> BitNot unary .)
    Mod             reduce using rule 51 (unary -> BitNot unary .)
    Plus            reduce using rule 51 (unary -> BitNot unary .)
    Minus           reduce using rule 51 (unary -> BitNot unary .)
    Less            reduce using rule 51 (unary -> BitNot unary .)
    Greater         reduce using rule 51 (unary -> BitNot unary .)
    LessEqual       reduce using rule 51 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 51 (unary -> BitNot unary .)
    NotEqual        reduce using rule 51 (unary -> BitNot unary .)
    Equal           reduce using rule 51 (unary -> BitNot unary .)
    BitAnd          reduce using rule 51 (unary -> BitNot unary .)
    Xor             reduce using rule 51 (unary -> BitNot unary .)
    BitOr           reduce using rule 51 (unary -> BitNot unary .)
    And             reduce using rule 51 (unary -> BitNot unary .)
    Question        reduce using rule 51 (unary -> BitNot unary .)
    Or              reduce using rule 51 (unary -> BitNot unary .)
    Semi            reduce using rule 51 (unary -> BitNot unary .)
    RParen          reduce using rule 51 (unary -> BitNot unary .)
    Comma           reduce using rule 51 (unary -> BitNot unary .)
    Colon           reduce using rule 51 (unary -> BitNot unary .)


state 60

    (52) unary -> Not unary .

    Mul             reduce using rule 52 (unary -> Not unary .)
    Div             reduce using rule 52 (unary -> Not unary .)
    Mod             reduce using rule 52 (unary -> Not unary .)
    Plus            reduce using rule 52 (unary -> Not unary .)
    Minus           reduce using rule 52 (unary -> Not unary .)
    Less            reduce using rule 52 (unary -> Not unary .)
    Greater         reduce using rule 52 (unary -> Not unary .)
    LessEqual       reduce using rule 52 (unary -> Not unary .)
    GreaterEqual    reduce using rule 52 (unary -> Not unary .)
    NotEqual        reduce using rule 52 (unary -> Not unary .)
    Equal           reduce using rule 52 (unary -> Not unary .)
    BitAnd          reduce using rule 52 (unary -> Not unary .)
    Xor             reduce using rule 52 (unary -> Not unary .)
    BitOr           reduce using rule 52 (unary -> Not unary .)
    And             reduce using rule 52 (unary -> Not unary .)
    Question        reduce using rule 52 (unary -> Not unary .)
    Or              reduce using rule 52 (unary -> Not unary .)
    Semi            reduce using rule 52 (unary -> Not unary .)
    RParen          reduce using rule 52 (unary -> Not unary .)
    Comma           reduce using rule 52 (unary -> Not unary .)
    Colon           reduce using rule 52 (unary -> Not unary .)


state 61

    (77) primary -> LParen expression . RParen

    RParen          shift and go to state 86


state 62

    (6) function -> type Identifier LParen paramlist RParen LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 87
    empty                          shift and go to state 88

state 63

    (7) function -> type Identifier LParen paramlist RParen Semi .

    Int             reduce using rule 7 (function -> type Identifier LParen paramlist RParen Semi .)
    $end            reduce using rule 7 (function -> type Identifier LParen paramlist RParen Semi .)


state 64

    (8) paramlist -> paramlist Comma type . Identifier

    Identifier      shift and go to state 89


state 65

    (57) assignment -> Identifier Assign expression .

    Semi            reduce using rule 57 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 57 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 57 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 57 (assignment -> Identifier Assign expression .)


state 66

    (53) postfix -> Identifier LParen expression_list . RParen
    (54) expression_list -> expression_list . Comma expression

    RParen          shift and go to state 90
    Comma           shift and go to state 91


state 67

    (56) expression_list -> expression .

    RParen          reduce using rule 56 (expression_list -> expression .)
    Comma           reduce using rule 56 (expression_list -> expression .)


state 68

    (55) expression_list -> empty .

    RParen          reduce using rule 55 (expression_list -> empty .)
    Comma           reduce using rule 55 (expression_list -> empty .)


state 69

    (74) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 92


state 70

    (58) logical_or -> logical_or Or logical_and .
    (59) logical_and -> logical_and . And bit_or

    Question        reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 58 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 42


state 71

    (59) logical_and -> logical_and And bit_or .
    (60) bit_or -> bit_or . BitOr xor

    And             reduce using rule 59 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 59 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 59 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 59 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 59 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 59 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 59 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 43


state 72

    (60) bit_or -> bit_or BitOr xor .
    (61) xor -> xor . Xor bit_and

    BitOr           reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 60 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 44


state 73

    (61) xor -> xor Xor bit_and .
    (62) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 61 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 61 (xor -> xor Xor bit_and .)
    And             reduce using rule 61 (xor -> xor Xor bit_and .)
    Question        reduce using rule 61 (xor -> xor Xor bit_and .)
    Or              reduce using rule 61 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 61 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 61 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 61 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 61 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 45


state 74

    (62) bit_and -> bit_and BitAnd equality .
    (63) equality -> equality . NotEqual relational
    (64) equality -> equality . Equal relational

    BitAnd          reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 62 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 46
    Equal           shift and go to state 47


state 75

    (63) equality -> equality NotEqual relational .
    (65) relational -> relational . Less additive
    (66) relational -> relational . Greater additive
    (67) relational -> relational . LessEqual additive
    (68) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 63 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 63 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 63 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 63 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 63 (equality -> equality NotEqual relational .)
    And             reduce using rule 63 (equality -> equality NotEqual relational .)
    Question        reduce using rule 63 (equality -> equality NotEqual relational .)
    Or              reduce using rule 63 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 63 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 63 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 63 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 63 (equality -> equality NotEqual relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 76

    (64) equality -> equality Equal relational .
    (65) relational -> relational . Less additive
    (66) relational -> relational . Greater additive
    (67) relational -> relational . LessEqual additive
    (68) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 64 (equality -> equality Equal relational .)
    Equal           reduce using rule 64 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 64 (equality -> equality Equal relational .)
    Xor             reduce using rule 64 (equality -> equality Equal relational .)
    BitOr           reduce using rule 64 (equality -> equality Equal relational .)
    And             reduce using rule 64 (equality -> equality Equal relational .)
    Question        reduce using rule 64 (equality -> equality Equal relational .)
    Or              reduce using rule 64 (equality -> equality Equal relational .)
    Semi            reduce using rule 64 (equality -> equality Equal relational .)
    RParen          reduce using rule 64 (equality -> equality Equal relational .)
    Comma           reduce using rule 64 (equality -> equality Equal relational .)
    Colon           reduce using rule 64 (equality -> equality Equal relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 77

    (65) relational -> relational Less additive .
    (69) additive -> additive . Plus multiplicative
    (70) additive -> additive . Minus multiplicative

    Less            reduce using rule 65 (relational -> relational Less additive .)
    Greater         reduce using rule 65 (relational -> relational Less additive .)
    LessEqual       reduce using rule 65 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 65 (relational -> relational Less additive .)
    NotEqual        reduce using rule 65 (relational -> relational Less additive .)
    Equal           reduce using rule 65 (relational -> relational Less additive .)
    BitAnd          reduce using rule 65 (relational -> relational Less additive .)
    Xor             reduce using rule 65 (relational -> relational Less additive .)
    BitOr           reduce using rule 65 (relational -> relational Less additive .)
    And             reduce using rule 65 (relational -> relational Less additive .)
    Question        reduce using rule 65 (relational -> relational Less additive .)
    Or              reduce using rule 65 (relational -> relational Less additive .)
    Semi            reduce using rule 65 (relational -> relational Less additive .)
    RParen          reduce using rule 65 (relational -> relational Less additive .)
    Comma           reduce using rule 65 (relational -> relational Less additive .)
    Colon           reduce using rule 65 (relational -> relational Less additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 78

    (66) relational -> relational Greater additive .
    (69) additive -> additive . Plus multiplicative
    (70) additive -> additive . Minus multiplicative

    Less            reduce using rule 66 (relational -> relational Greater additive .)
    Greater         reduce using rule 66 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 66 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 66 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 66 (relational -> relational Greater additive .)
    Equal           reduce using rule 66 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 66 (relational -> relational Greater additive .)
    Xor             reduce using rule 66 (relational -> relational Greater additive .)
    BitOr           reduce using rule 66 (relational -> relational Greater additive .)
    And             reduce using rule 66 (relational -> relational Greater additive .)
    Question        reduce using rule 66 (relational -> relational Greater additive .)
    Or              reduce using rule 66 (relational -> relational Greater additive .)
    Semi            reduce using rule 66 (relational -> relational Greater additive .)
    RParen          reduce using rule 66 (relational -> relational Greater additive .)
    Comma           reduce using rule 66 (relational -> relational Greater additive .)
    Colon           reduce using rule 66 (relational -> relational Greater additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 79

    (67) relational -> relational LessEqual additive .
    (69) additive -> additive . Plus multiplicative
    (70) additive -> additive . Minus multiplicative

    Less            reduce using rule 67 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 67 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 67 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 67 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 67 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 67 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 67 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 67 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 67 (relational -> relational LessEqual additive .)
    And             reduce using rule 67 (relational -> relational LessEqual additive .)
    Question        reduce using rule 67 (relational -> relational LessEqual additive .)
    Or              reduce using rule 67 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 67 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 67 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 67 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 67 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 80

    (68) relational -> relational GreaterEqual additive .
    (69) additive -> additive . Plus multiplicative
    (70) additive -> additive . Minus multiplicative

    Less            reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 68 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 68 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 68 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 68 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 68 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 68 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 68 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 68 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 81

    (69) additive -> additive Plus multiplicative .
    (71) multiplicative -> multiplicative . Mul unary
    (72) multiplicative -> multiplicative . Div unary
    (73) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 69 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 69 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 69 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 69 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 69 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 69 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 69 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 69 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 69 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 69 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 69 (additive -> additive Plus multiplicative .)
    And             reduce using rule 69 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 69 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 69 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 69 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 69 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 69 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 69 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 82

    (70) additive -> additive Minus multiplicative .
    (71) multiplicative -> multiplicative . Mul unary
    (72) multiplicative -> multiplicative . Div unary
    (73) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 70 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 70 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 70 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 70 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 70 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 70 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 70 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 70 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 70 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 70 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 70 (additive -> additive Minus multiplicative .)
    And             reduce using rule 70 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 70 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 70 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 70 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 70 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 70 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 70 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 83

    (71) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 71 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 71 (multiplicative -> multiplicative Mul unary .)


state 84

    (72) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 72 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 72 (multiplicative -> multiplicative Div unary .)


state 85

    (73) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 73 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 73 (multiplicative -> multiplicative Mod unary .)


state 86

    (77) primary -> LParen expression RParen .

    Mul             reduce using rule 77 (primary -> LParen expression RParen .)
    Div             reduce using rule 77 (primary -> LParen expression RParen .)
    Mod             reduce using rule 77 (primary -> LParen expression RParen .)
    Plus            reduce using rule 77 (primary -> LParen expression RParen .)
    Minus           reduce using rule 77 (primary -> LParen expression RParen .)
    Less            reduce using rule 77 (primary -> LParen expression RParen .)
    Greater         reduce using rule 77 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 77 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 77 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 77 (primary -> LParen expression RParen .)
    Equal           reduce using rule 77 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 77 (primary -> LParen expression RParen .)
    Xor             reduce using rule 77 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 77 (primary -> LParen expression RParen .)
    And             reduce using rule 77 (primary -> LParen expression RParen .)
    Question        reduce using rule 77 (primary -> LParen expression RParen .)
    Or              reduce using rule 77 (primary -> LParen expression RParen .)
    Semi            reduce using rule 77 (primary -> LParen expression RParen .)
    RParen          reduce using rule 77 (primary -> LParen expression RParen .)
    Comma           reduce using rule 77 (primary -> LParen expression RParen .)
    Colon           reduce using rule 77 (primary -> LParen expression RParen .)


state 87

    (6) function -> type Identifier LParen paramlist RParen LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (34) declaration -> . type Identifier
    (35) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RBrace          shift and go to state 95
    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    type                           shift and go to state 93
    block_item                     shift and go to state 96
    statement                      shift and go to state 97
    declaration                    shift and go to state 98
    statement_matched              shift and go to state 99
    statement_unmatched            shift and go to state 100
    expression                     shift and go to state 101
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 88

    (12) block -> empty .

    RBrace          reduce using rule 12 (block -> empty .)
    If              reduce using rule 12 (block -> empty .)
    While           reduce using rule 12 (block -> empty .)
    For             reduce using rule 12 (block -> empty .)
    Do              reduce using rule 12 (block -> empty .)
    Return          reduce using rule 12 (block -> empty .)
    LBrace          reduce using rule 12 (block -> empty .)
    Break           reduce using rule 12 (block -> empty .)
    Continue        reduce using rule 12 (block -> empty .)
    Int             reduce using rule 12 (block -> empty .)
    Identifier      reduce using rule 12 (block -> empty .)
    Minus           reduce using rule 12 (block -> empty .)
    BitNot          reduce using rule 12 (block -> empty .)
    Not             reduce using rule 12 (block -> empty .)
    Integer         reduce using rule 12 (block -> empty .)
    LParen          reduce using rule 12 (block -> empty .)
    Semi            reduce using rule 12 (block -> empty .)


state 89

    (8) paramlist -> paramlist Comma type Identifier .

    RParen          reduce using rule 8 (paramlist -> paramlist Comma type Identifier .)
    Comma           reduce using rule 8 (paramlist -> paramlist Comma type Identifier .)


state 90

    (53) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 53 (postfix -> Identifier LParen expression_list RParen .)


state 91

    (54) expression_list -> expression_list Comma . expression
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 111
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 92

    (74) conditional -> logical_or Question expression Colon . conditional
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Identifier      shift and go to state 58
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    logical_or                     shift and go to state 18
    conditional                    shift and go to state 112
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 93

    (34) declaration -> type . Identifier
    (35) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 113


state 94

    (29) statement_matched -> LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 114
    empty                          shift and go to state 88

state 95

    (6) function -> type Identifier LParen paramlist RParen LBrace block RBrace .

    Int             reduce using rule 6 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)
    $end            reduce using rule 6 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)


state 96

    (11) block -> block block_item .

    RBrace          reduce using rule 11 (block -> block block_item .)
    If              reduce using rule 11 (block -> block block_item .)
    While           reduce using rule 11 (block -> block block_item .)
    For             reduce using rule 11 (block -> block block_item .)
    Do              reduce using rule 11 (block -> block block_item .)
    Return          reduce using rule 11 (block -> block block_item .)
    LBrace          reduce using rule 11 (block -> block block_item .)
    Break           reduce using rule 11 (block -> block block_item .)
    Continue        reduce using rule 11 (block -> block block_item .)
    Int             reduce using rule 11 (block -> block block_item .)
    Identifier      reduce using rule 11 (block -> block block_item .)
    Minus           reduce using rule 11 (block -> block block_item .)
    BitNot          reduce using rule 11 (block -> block block_item .)
    Not             reduce using rule 11 (block -> block block_item .)
    Integer         reduce using rule 11 (block -> block block_item .)
    LParen          reduce using rule 11 (block -> block block_item .)
    Semi            reduce using rule 11 (block -> block block_item .)


state 97

    (13) block_item -> statement .

    RBrace          reduce using rule 13 (block_item -> statement .)
    If              reduce using rule 13 (block_item -> statement .)
    While           reduce using rule 13 (block_item -> statement .)
    For             reduce using rule 13 (block_item -> statement .)
    Do              reduce using rule 13 (block_item -> statement .)
    Return          reduce using rule 13 (block_item -> statement .)
    LBrace          reduce using rule 13 (block_item -> statement .)
    Break           reduce using rule 13 (block_item -> statement .)
    Continue        reduce using rule 13 (block_item -> statement .)
    Int             reduce using rule 13 (block_item -> statement .)
    Identifier      reduce using rule 13 (block_item -> statement .)
    Minus           reduce using rule 13 (block_item -> statement .)
    BitNot          reduce using rule 13 (block_item -> statement .)
    Not             reduce using rule 13 (block_item -> statement .)
    Integer         reduce using rule 13 (block_item -> statement .)
    LParen          reduce using rule 13 (block_item -> statement .)
    Semi            reduce using rule 13 (block_item -> statement .)


state 98

    (14) block_item -> declaration . Semi

    Semi            shift and go to state 115


state 99

    (15) statement -> statement_matched .

    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 100

    (16) statement -> statement_unmatched .

    RBrace          reduce using rule 16 (statement -> statement_unmatched .)
    If              reduce using rule 16 (statement -> statement_unmatched .)
    While           reduce using rule 16 (statement -> statement_unmatched .)
    For             reduce using rule 16 (statement -> statement_unmatched .)
    Do              reduce using rule 16 (statement -> statement_unmatched .)
    Return          reduce using rule 16 (statement -> statement_unmatched .)
    LBrace          reduce using rule 16 (statement -> statement_unmatched .)
    Break           reduce using rule 16 (statement -> statement_unmatched .)
    Continue        reduce using rule 16 (statement -> statement_unmatched .)
    Int             reduce using rule 16 (statement -> statement_unmatched .)
    Identifier      reduce using rule 16 (statement -> statement_unmatched .)
    Minus           reduce using rule 16 (statement -> statement_unmatched .)
    BitNot          reduce using rule 16 (statement -> statement_unmatched .)
    Not             reduce using rule 16 (statement -> statement_unmatched .)
    Integer         reduce using rule 16 (statement -> statement_unmatched .)
    LParen          reduce using rule 16 (statement -> statement_unmatched .)
    Semi            reduce using rule 16 (statement -> statement_unmatched .)


state 101

    (32) opt_expression -> expression .

    Semi            reduce using rule 32 (opt_expression -> expression .)
    RParen          reduce using rule 32 (opt_expression -> expression .)


state 102

    (17) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 116


state 103

    (20) statement_matched -> While . LParen expression RParen statement_matched
    (21) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 117


state 104

    (22) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 118


state 105

    (28) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 119


state 106

    (26) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    statement_matched              shift and go to state 120
    expression                     shift and go to state 101
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 107

    (27) statement_matched -> Return . expression Semi
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 124
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 108

    (30) statement_matched -> Break . Semi

    Semi            shift and go to state 125


state 109

    (31) statement_matched -> Continue . Semi

    Semi            shift and go to state 126


state 110

    (33) opt_expression -> empty .

    Semi            reduce using rule 33 (opt_expression -> empty .)
    RParen          reduce using rule 33 (opt_expression -> empty .)


state 111

    (54) expression_list -> expression_list Comma expression .

    RParen          reduce using rule 54 (expression_list -> expression_list Comma expression .)
    Comma           reduce using rule 54 (expression_list -> expression_list Comma expression .)


state 112

    (74) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 74 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 74 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 74 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 74 (conditional -> logical_or Question expression Colon conditional .)


state 113

    (34) declaration -> type Identifier .
    (35) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 34 (declaration -> type Identifier .)
    Assign          shift and go to state 10


state 114

    (29) statement_matched -> LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (34) declaration -> . type Identifier
    (35) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RBrace          shift and go to state 127
    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    block_item                     shift and go to state 96
    statement                      shift and go to state 97
    declaration                    shift and go to state 98
    statement_matched              shift and go to state 99
    statement_unmatched            shift and go to state 100
    type                           shift and go to state 93
    expression                     shift and go to state 101
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 115

    (14) block_item -> declaration Semi .

    RBrace          reduce using rule 14 (block_item -> declaration Semi .)
    If              reduce using rule 14 (block_item -> declaration Semi .)
    While           reduce using rule 14 (block_item -> declaration Semi .)
    For             reduce using rule 14 (block_item -> declaration Semi .)
    Do              reduce using rule 14 (block_item -> declaration Semi .)
    Return          reduce using rule 14 (block_item -> declaration Semi .)
    LBrace          reduce using rule 14 (block_item -> declaration Semi .)
    Break           reduce using rule 14 (block_item -> declaration Semi .)
    Continue        reduce using rule 14 (block_item -> declaration Semi .)
    Int             reduce using rule 14 (block_item -> declaration Semi .)
    Identifier      reduce using rule 14 (block_item -> declaration Semi .)
    Minus           reduce using rule 14 (block_item -> declaration Semi .)
    BitNot          reduce using rule 14 (block_item -> declaration Semi .)
    Not             reduce using rule 14 (block_item -> declaration Semi .)
    Integer         reduce using rule 14 (block_item -> declaration Semi .)
    LParen          reduce using rule 14 (block_item -> declaration Semi .)
    Semi            reduce using rule 14 (block_item -> declaration Semi .)


state 116

    (17) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen . expression RParen statement
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 128
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 117

    (20) statement_matched -> While LParen . expression RParen statement_matched
    (21) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 129
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 118

    (22) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (34) declaration -> . type Identifier
    (35) declaration -> . type Identifier Assign expression
    (36) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 130
    declaration                    shift and go to state 131
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    type                           shift and go to state 93
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 119

    (28) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 28 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 28 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 28 (statement_matched -> opt_expression Semi .)


state 120

    (26) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 132


state 121

    (20) statement_matched -> While . LParen expression RParen statement_matched

    LParen          shift and go to state 133


state 122

    (17) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched

    LParen          shift and go to state 134


state 123

    (22) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 135


state 124

    (27) statement_matched -> Return expression . Semi

    Semi            shift and go to state 136


state 125

    (30) statement_matched -> Break Semi .

    RBrace          reduce using rule 30 (statement_matched -> Break Semi .)
    If              reduce using rule 30 (statement_matched -> Break Semi .)
    While           reduce using rule 30 (statement_matched -> Break Semi .)
    For             reduce using rule 30 (statement_matched -> Break Semi .)
    Do              reduce using rule 30 (statement_matched -> Break Semi .)
    Return          reduce using rule 30 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 30 (statement_matched -> Break Semi .)
    Break           reduce using rule 30 (statement_matched -> Break Semi .)
    Continue        reduce using rule 30 (statement_matched -> Break Semi .)
    Int             reduce using rule 30 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 30 (statement_matched -> Break Semi .)
    Minus           reduce using rule 30 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 30 (statement_matched -> Break Semi .)
    Not             reduce using rule 30 (statement_matched -> Break Semi .)
    Integer         reduce using rule 30 (statement_matched -> Break Semi .)
    LParen          reduce using rule 30 (statement_matched -> Break Semi .)
    Semi            reduce using rule 30 (statement_matched -> Break Semi .)
    Else            reduce using rule 30 (statement_matched -> Break Semi .)


state 126

    (31) statement_matched -> Continue Semi .

    RBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    If              reduce using rule 31 (statement_matched -> Continue Semi .)
    While           reduce using rule 31 (statement_matched -> Continue Semi .)
    For             reduce using rule 31 (statement_matched -> Continue Semi .)
    Do              reduce using rule 31 (statement_matched -> Continue Semi .)
    Return          reduce using rule 31 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    Break           reduce using rule 31 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 31 (statement_matched -> Continue Semi .)
    Int             reduce using rule 31 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 31 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 31 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 31 (statement_matched -> Continue Semi .)
    Not             reduce using rule 31 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 31 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 31 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 31 (statement_matched -> Continue Semi .)
    Else            reduce using rule 31 (statement_matched -> Continue Semi .)


state 127

    (29) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 29 (statement_matched -> LBrace block RBrace .)


state 128

    (17) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 137


state 129

    (20) statement_matched -> While LParen expression . RParen statement_matched
    (21) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 138


state 130

    (22) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 139


state 131

    (23) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 140


state 132

    (26) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 141


state 133

    (20) statement_matched -> While LParen . expression RParen statement_matched
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 142
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 134

    (17) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 143
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 135

    (22) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (34) declaration -> . type Identifier
    (35) declaration -> . type Identifier Assign expression
    (36) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 144
    declaration                    shift and go to state 145
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    type                           shift and go to state 93
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 136

    (27) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 27 (statement_matched -> Return expression Semi .)
    If              reduce using rule 27 (statement_matched -> Return expression Semi .)
    While           reduce using rule 27 (statement_matched -> Return expression Semi .)
    For             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 27 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 27 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 27 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 27 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 27 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 27 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 27 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 27 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 27 (statement_matched -> Return expression Semi .)


state 137

    (17) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression RParen . statement
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 146
    statement_unmatched            shift and go to state 100
    statement                      shift and go to state 147
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 138

    (20) statement_matched -> While LParen expression RParen . statement_matched
    (21) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 148
    statement_unmatched            shift and go to state 149
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 139

    (22) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 150
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 140

    (23) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 151
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 141

    (26) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (36) expression -> . assignment
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 152
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 142

    (20) statement_matched -> While LParen expression . RParen statement_matched

    RParen          shift and go to state 153


state 143

    (17) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched

    RParen          shift and go to state 154


state 144

    (22) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 155


state 145

    (23) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 156


state 146

    (17) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (15) statement -> statement_matched .

    Else            shift and go to state 157
    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 147

    (19) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)


state 148

    (20) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)


state 149

    (21) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 150

    (22) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 158


state 151

    (23) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 159


state 152

    (26) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 160


state 153

    (20) statement_matched -> While LParen expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 148
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 154

    (17) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 161
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 155

    (22) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 162
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 156

    (23) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 163
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 157

    (17) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 164
    statement_unmatched            shift and go to state 165
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 158

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 166
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 159

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 167
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 160

    (26) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 168


state 161

    (17) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched

    Else            shift and go to state 169


state 162

    (22) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 170


state 163

    (23) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 171


state 164

    (17) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 165

    (18) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 166

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 172


state 167

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 173


state 168

    (26) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 169

    (17) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    expression                     shift and go to state 101
    statement_matched              shift and go to state 164
    opt_expression                 shift and go to state 105
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 170

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 174
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 171

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 175
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 172

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 105
    statement_matched              shift and go to state 176
    statement_unmatched            shift and go to state 177
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 173

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 102
    While           shift and go to state 103
    For             shift and go to state 104
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 105
    statement_matched              shift and go to state 178
    statement_unmatched            shift and go to state 179
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 174

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 180


state 175

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 181


state 176

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 177

    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 178

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 179

    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 180

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 105
    statement_matched              shift and go to state 176
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32

state 181

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (36) expression -> . assignment
    (1) empty -> .
    (37) assignment -> . conditional
    (57) assignment -> . Identifier Assign expression
    (38) conditional -> . logical_or
    (74) conditional -> . logical_or Question expression Colon conditional
    (39) logical_or -> . logical_and
    (58) logical_or -> . logical_or Or logical_and
    (40) logical_and -> . bit_or
    (59) logical_and -> . logical_and And bit_or
    (41) bit_or -> . xor
    (60) bit_or -> . bit_or BitOr xor
    (42) xor -> . bit_and
    (61) xor -> . xor Xor bit_and
    (43) bit_and -> . equality
    (62) bit_and -> . bit_and BitAnd equality
    (44) equality -> . relational
    (63) equality -> . equality NotEqual relational
    (64) equality -> . equality Equal relational
    (45) relational -> . additive
    (65) relational -> . relational Less additive
    (66) relational -> . relational Greater additive
    (67) relational -> . relational LessEqual additive
    (68) relational -> . relational GreaterEqual additive
    (46) additive -> . multiplicative
    (69) additive -> . additive Plus multiplicative
    (70) additive -> . additive Minus multiplicative
    (47) multiplicative -> . unary
    (71) multiplicative -> . multiplicative Mul unary
    (72) multiplicative -> . multiplicative Div unary
    (73) multiplicative -> . multiplicative Mod unary
    (48) unary -> . postfix
    (50) unary -> . Minus unary
    (51) unary -> . BitNot unary
    (52) unary -> . Not unary
    (49) postfix -> . primary
    (53) postfix -> . Identifier LParen expression_list RParen
    (75) primary -> . Integer
    (76) primary -> . Identifier
    (77) primary -> . LParen expression RParen

    If              shift and go to state 122
    While           shift and go to state 121
    For             shift and go to state 123
    Do              shift and go to state 106
    Return          shift and go to state 107
    LBrace          shift and go to state 94
    Break           shift and go to state 108
    Continue        shift and go to state 109
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 14
    Minus           shift and go to state 27
    BitNot          shift and go to state 30
    Not             shift and go to state 31
    Integer         shift and go to state 34
    LParen          shift and go to state 33

    opt_expression                 shift and go to state 105
    statement_matched              shift and go to state 178
    expression                     shift and go to state 101
    empty                          shift and go to state 110
    assignment                     shift and go to state 16
    conditional                    shift and go to state 17
    logical_or                     shift and go to state 18
    logical_and                    shift and go to state 19
    bit_or                         shift and go to state 20
    xor                            shift and go to state 21
    bit_and                        shift and go to state 22
    equality                       shift and go to state 23
    relational                     shift and go to state 24
    additive                       shift and go to state 25
    multiplicative                 shift and go to state 26
    unary                          shift and go to state 28
    postfix                        shift and go to state 29
    primary                        shift and go to state 32
