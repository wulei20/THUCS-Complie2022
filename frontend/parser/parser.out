Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> program declaration Semi
Rule 4     program -> empty
Rule 5     type -> Int
Rule 6     function -> type Identifier LParen paramlist RParen LBrace block RBrace
Rule 7     function -> type Identifier LParen paramlist RParen Semi
Rule 8     paramlist -> paramlist Comma type Identifier
Rule 9     paramlist -> empty
Rule 10    paramlist -> type Identifier
Rule 11    block -> block block_item
Rule 12    block -> empty
Rule 13    block_item -> statement
Rule 14    block_item -> declaration Semi
Rule 15    statement -> statement_matched
Rule 16    statement -> statement_unmatched
Rule 17    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 18    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 19    statement_unmatched -> If LParen expression RParen statement
Rule 20    statement_matched -> While LParen expression RParen statement_matched
Rule 21    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 22    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 23    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 24    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 25    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 26    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 27    statement_matched -> Return expression Semi
Rule 28    statement_matched -> opt_expression Semi
Rule 29    statement_matched -> LBrace block RBrace
Rule 30    statement_matched -> Break Semi
Rule 31    statement_matched -> Continue Semi
Rule 32    opt_expression -> expression
Rule 33    opt_expression -> empty
Rule 34    declaration -> type Identifier arrayindex
Rule 35    declaration -> type Identifier Assign expression
Rule 36    arrayindex -> empty
Rule 37    arrayindex -> arrayindex LBracket Integer RBracket
Rule 38    expression -> assignment
Rule 39    assignment -> conditional
Rule 40    conditional -> logical_or
Rule 41    logical_or -> logical_and
Rule 42    logical_and -> bit_or
Rule 43    bit_or -> xor
Rule 44    xor -> bit_and
Rule 45    bit_and -> equality
Rule 46    equality -> relational
Rule 47    relational -> additive
Rule 48    additive -> multiplicative
Rule 49    multiplicative -> unary
Rule 50    unary -> postfix
Rule 51    postfix -> primary
Rule 52    unary -> Minus unary
Rule 53    unary -> BitNot unary
Rule 54    unary -> Not unary
Rule 55    postfix -> Identifier LParen expression_list RParen
Rule 56    postfix -> postfix LBracket expression RBracket
Rule 57    expression_list -> expression_list Comma expression
Rule 58    expression_list -> empty
Rule 59    expression_list -> expression
Rule 60    assignment -> unary Assign expression
Rule 61    logical_or -> logical_or Or logical_and
Rule 62    logical_and -> logical_and And bit_or
Rule 63    bit_or -> bit_or BitOr xor
Rule 64    xor -> xor Xor bit_and
Rule 65    bit_and -> bit_and BitAnd equality
Rule 66    equality -> equality NotEqual relational
Rule 67    equality -> equality Equal relational
Rule 68    relational -> relational Less additive
Rule 69    relational -> relational Greater additive
Rule 70    relational -> relational LessEqual additive
Rule 71    relational -> relational GreaterEqual additive
Rule 72    additive -> additive Plus multiplicative
Rule 73    additive -> additive Minus multiplicative
Rule 74    multiplicative -> multiplicative Mul unary
Rule 75    multiplicative -> multiplicative Div unary
Rule 76    multiplicative -> multiplicative Mod unary
Rule 77    conditional -> logical_or Question expression Colon conditional
Rule 78    primary -> Integer
Rule 79    primary -> Identifier
Rule 80    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 62
Assign               : 35 60
BitAnd               : 65
BitNot               : 53
BitOr                : 63
Break                : 30
Colon                : 77
Comma                : 8 57
Continue             : 31
Div                  : 75
Do                   : 26
Else                 : 17 18
Equal                : 67
For                  : 22 23 24 25
Greater              : 69
GreaterEqual         : 71
Identifier           : 6 7 8 10 34 35 55 79
If                   : 17 18 19
Int                  : 5
Integer              : 37 78
LBrace               : 6 29
LBracket             : 37 56
LParen               : 6 7 17 18 19 20 21 22 23 24 25 26 55 80
Less                 : 68
LessEqual            : 70
Minus                : 52 73
Mod                  : 76
Mul                  : 74
Not                  : 54
NotEqual             : 66
Or                   : 61
Plus                 : 72
Question             : 77
RBrace               : 6 29
RBracket             : 37 56
RParen               : 6 7 17 18 19 20 21 22 23 24 25 26 55 80
Return               : 27
Semi                 : 3 7 14 22 22 23 23 24 24 25 25 26 27 28 30 31
While                : 20 21 26
Xor                  : 64
error                : 

Nonterminals, with rules where they appear

additive             : 47 68 69 70 71 72 73
arrayindex           : 34 37
assignment           : 38
bit_and              : 44 64 65
bit_or               : 42 62 63
block                : 6 11 29
block_item           : 11
conditional          : 39 77
declaration          : 3 14 23 25
empty                : 4 9 12 33 36 58
equality             : 45 65 66 67
expression           : 17 18 19 20 21 26 27 32 35 56 57 59 60 77 80
expression_list      : 55 57
function             : 2
logical_and          : 41 61 62
logical_or           : 40 61 77
multiplicative       : 48 72 73 74 75 76
opt_expression       : 22 22 22 23 23 24 24 24 25 25 28
paramlist            : 6 7 8
postfix              : 50 56
primary              : 51
program              : 2 3 0
relational           : 46 66 67 68 69 70 71
statement            : 13 19
statement_matched    : 15 17 17 18 20 22 23 26
statement_unmatched  : 16 18 21 24 25
type                 : 6 7 8 10 34 35
unary                : 49 52 53 54 60 74 75 76
xor                  : 43 63 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . program declaration Semi
    (4) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (3) program -> program . declaration Semi
    (6) function -> . type Identifier LParen paramlist RParen LBrace block RBrace
    (7) function -> . type Identifier LParen paramlist RParen Semi
    (34) declaration -> . type Identifier arrayindex
    (35) declaration -> . type Identifier Assign expression
    (5) type -> . Int

    Int             shift and go to state 6

    function                       shift and go to state 3
    declaration                    shift and go to state 4
    type                           shift and go to state 5

state 2

    (4) program -> empty .

    Int             reduce using rule 4 (program -> empty .)
    $end            reduce using rule 4 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (3) program -> program declaration . Semi

    Semi            shift and go to state 7


state 5

    (6) function -> type . Identifier LParen paramlist RParen LBrace block RBrace
    (7) function -> type . Identifier LParen paramlist RParen Semi
    (34) declaration -> type . Identifier arrayindex
    (35) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 8


state 6

    (5) type -> Int .

    Identifier      reduce using rule 5 (type -> Int .)


state 7

    (3) program -> program declaration Semi .

    Int             reduce using rule 3 (program -> program declaration Semi .)
    $end            reduce using rule 3 (program -> program declaration Semi .)


state 8

    (6) function -> type Identifier . LParen paramlist RParen LBrace block RBrace
    (7) function -> type Identifier . LParen paramlist RParen Semi
    (34) declaration -> type Identifier . arrayindex
    (35) declaration -> type Identifier . Assign expression
    (36) arrayindex -> . empty
    (37) arrayindex -> . arrayindex LBracket Integer RBracket
    (1) empty -> .

    LParen          shift and go to state 9
    Assign          shift and go to state 11
    LBracket        reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    arrayindex                     shift and go to state 10
    empty                          shift and go to state 12

state 9

    (6) function -> type Identifier LParen . paramlist RParen LBrace block RBrace
    (7) function -> type Identifier LParen . paramlist RParen Semi
    (8) paramlist -> . paramlist Comma type Identifier
    (9) paramlist -> . empty
    (10) paramlist -> . type Identifier
    (1) empty -> .
    (5) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 6

    type                           shift and go to state 13
    paramlist                      shift and go to state 14
    empty                          shift and go to state 15

state 10

    (34) declaration -> type Identifier arrayindex .
    (37) arrayindex -> arrayindex . LBracket Integer RBracket

    Semi            reduce using rule 34 (declaration -> type Identifier arrayindex .)
    LBracket        shift and go to state 16


state 11

    (35) declaration -> type Identifier Assign . expression
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 18
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 12

    (36) arrayindex -> empty .

    LBracket        reduce using rule 36 (arrayindex -> empty .)
    Semi            reduce using rule 36 (arrayindex -> empty .)


state 13

    (10) paramlist -> type . Identifier

    Identifier      shift and go to state 38


state 14

    (6) function -> type Identifier LParen paramlist . RParen LBrace block RBrace
    (7) function -> type Identifier LParen paramlist . RParen Semi
    (8) paramlist -> paramlist . Comma type Identifier

    RParen          shift and go to state 39
    Comma           shift and go to state 40


state 15

    (9) paramlist -> empty .

    RParen          reduce using rule 9 (paramlist -> empty .)
    Comma           reduce using rule 9 (paramlist -> empty .)


state 16

    (37) arrayindex -> arrayindex LBracket . Integer RBracket

    Integer         shift and go to state 41


state 17

    (55) postfix -> Identifier . LParen expression_list RParen
    (79) primary -> Identifier .

    LParen          shift and go to state 42
    LBracket        reduce using rule 79 (primary -> Identifier .)
    Assign          reduce using rule 79 (primary -> Identifier .)
    Mul             reduce using rule 79 (primary -> Identifier .)
    Div             reduce using rule 79 (primary -> Identifier .)
    Mod             reduce using rule 79 (primary -> Identifier .)
    Plus            reduce using rule 79 (primary -> Identifier .)
    Minus           reduce using rule 79 (primary -> Identifier .)
    Less            reduce using rule 79 (primary -> Identifier .)
    Greater         reduce using rule 79 (primary -> Identifier .)
    LessEqual       reduce using rule 79 (primary -> Identifier .)
    GreaterEqual    reduce using rule 79 (primary -> Identifier .)
    NotEqual        reduce using rule 79 (primary -> Identifier .)
    Equal           reduce using rule 79 (primary -> Identifier .)
    BitAnd          reduce using rule 79 (primary -> Identifier .)
    Xor             reduce using rule 79 (primary -> Identifier .)
    BitOr           reduce using rule 79 (primary -> Identifier .)
    And             reduce using rule 79 (primary -> Identifier .)
    Question        reduce using rule 79 (primary -> Identifier .)
    Or              reduce using rule 79 (primary -> Identifier .)
    Semi            reduce using rule 79 (primary -> Identifier .)
    RParen          reduce using rule 79 (primary -> Identifier .)
    Comma           reduce using rule 79 (primary -> Identifier .)
    Colon           reduce using rule 79 (primary -> Identifier .)
    RBracket        reduce using rule 79 (primary -> Identifier .)


state 18

    (35) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 35 (declaration -> type Identifier Assign expression .)


state 19

    (38) expression -> assignment .

    Semi            reduce using rule 38 (expression -> assignment .)
    RParen          reduce using rule 38 (expression -> assignment .)
    Comma           reduce using rule 38 (expression -> assignment .)
    Colon           reduce using rule 38 (expression -> assignment .)
    RBracket        reduce using rule 38 (expression -> assignment .)


state 20

    (39) assignment -> conditional .

    Semi            reduce using rule 39 (assignment -> conditional .)
    RParen          reduce using rule 39 (assignment -> conditional .)
    Comma           reduce using rule 39 (assignment -> conditional .)
    Colon           reduce using rule 39 (assignment -> conditional .)
    RBracket        reduce using rule 39 (assignment -> conditional .)


state 21

    (60) assignment -> unary . Assign expression
    (49) multiplicative -> unary .

    Assign          shift and go to state 43
    Mul             reduce using rule 49 (multiplicative -> unary .)
    Div             reduce using rule 49 (multiplicative -> unary .)
    Mod             reduce using rule 49 (multiplicative -> unary .)
    Plus            reduce using rule 49 (multiplicative -> unary .)
    Minus           reduce using rule 49 (multiplicative -> unary .)
    Less            reduce using rule 49 (multiplicative -> unary .)
    Greater         reduce using rule 49 (multiplicative -> unary .)
    LessEqual       reduce using rule 49 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 49 (multiplicative -> unary .)
    NotEqual        reduce using rule 49 (multiplicative -> unary .)
    Equal           reduce using rule 49 (multiplicative -> unary .)
    BitAnd          reduce using rule 49 (multiplicative -> unary .)
    Xor             reduce using rule 49 (multiplicative -> unary .)
    BitOr           reduce using rule 49 (multiplicative -> unary .)
    And             reduce using rule 49 (multiplicative -> unary .)
    Question        reduce using rule 49 (multiplicative -> unary .)
    Or              reduce using rule 49 (multiplicative -> unary .)
    Semi            reduce using rule 49 (multiplicative -> unary .)
    RParen          reduce using rule 49 (multiplicative -> unary .)
    Comma           reduce using rule 49 (multiplicative -> unary .)
    Colon           reduce using rule 49 (multiplicative -> unary .)
    RBracket        reduce using rule 49 (multiplicative -> unary .)


state 22

    (40) conditional -> logical_or .
    (77) conditional -> logical_or . Question expression Colon conditional
    (61) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 40 (conditional -> logical_or .)
    RParen          reduce using rule 40 (conditional -> logical_or .)
    Comma           reduce using rule 40 (conditional -> logical_or .)
    Colon           reduce using rule 40 (conditional -> logical_or .)
    RBracket        reduce using rule 40 (conditional -> logical_or .)
    Question        shift and go to state 44
    Or              shift and go to state 45


state 23

    (50) unary -> postfix .
    (56) postfix -> postfix . LBracket expression RBracket

    Assign          reduce using rule 50 (unary -> postfix .)
    Mul             reduce using rule 50 (unary -> postfix .)
    Div             reduce using rule 50 (unary -> postfix .)
    Mod             reduce using rule 50 (unary -> postfix .)
    Plus            reduce using rule 50 (unary -> postfix .)
    Minus           reduce using rule 50 (unary -> postfix .)
    Less            reduce using rule 50 (unary -> postfix .)
    Greater         reduce using rule 50 (unary -> postfix .)
    LessEqual       reduce using rule 50 (unary -> postfix .)
    GreaterEqual    reduce using rule 50 (unary -> postfix .)
    NotEqual        reduce using rule 50 (unary -> postfix .)
    Equal           reduce using rule 50 (unary -> postfix .)
    BitAnd          reduce using rule 50 (unary -> postfix .)
    Xor             reduce using rule 50 (unary -> postfix .)
    BitOr           reduce using rule 50 (unary -> postfix .)
    And             reduce using rule 50 (unary -> postfix .)
    Question        reduce using rule 50 (unary -> postfix .)
    Or              reduce using rule 50 (unary -> postfix .)
    Semi            reduce using rule 50 (unary -> postfix .)
    RParen          reduce using rule 50 (unary -> postfix .)
    Comma           reduce using rule 50 (unary -> postfix .)
    Colon           reduce using rule 50 (unary -> postfix .)
    RBracket        reduce using rule 50 (unary -> postfix .)
    LBracket        shift and go to state 46


state 24

    (52) unary -> Minus . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 47
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 25

    (53) unary -> BitNot . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 48
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 26

    (54) unary -> Not . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 49
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 27

    (41) logical_or -> logical_and .
    (62) logical_and -> logical_and . And bit_or

    Question        reduce using rule 41 (logical_or -> logical_and .)
    Or              reduce using rule 41 (logical_or -> logical_and .)
    Semi            reduce using rule 41 (logical_or -> logical_and .)
    RParen          reduce using rule 41 (logical_or -> logical_and .)
    Comma           reduce using rule 41 (logical_or -> logical_and .)
    Colon           reduce using rule 41 (logical_or -> logical_and .)
    RBracket        reduce using rule 41 (logical_or -> logical_and .)
    And             shift and go to state 50


state 28

    (51) postfix -> primary .

    LBracket        reduce using rule 51 (postfix -> primary .)
    Assign          reduce using rule 51 (postfix -> primary .)
    Mul             reduce using rule 51 (postfix -> primary .)
    Div             reduce using rule 51 (postfix -> primary .)
    Mod             reduce using rule 51 (postfix -> primary .)
    Plus            reduce using rule 51 (postfix -> primary .)
    Minus           reduce using rule 51 (postfix -> primary .)
    Less            reduce using rule 51 (postfix -> primary .)
    Greater         reduce using rule 51 (postfix -> primary .)
    LessEqual       reduce using rule 51 (postfix -> primary .)
    GreaterEqual    reduce using rule 51 (postfix -> primary .)
    NotEqual        reduce using rule 51 (postfix -> primary .)
    Equal           reduce using rule 51 (postfix -> primary .)
    BitAnd          reduce using rule 51 (postfix -> primary .)
    Xor             reduce using rule 51 (postfix -> primary .)
    BitOr           reduce using rule 51 (postfix -> primary .)
    And             reduce using rule 51 (postfix -> primary .)
    Question        reduce using rule 51 (postfix -> primary .)
    Or              reduce using rule 51 (postfix -> primary .)
    Semi            reduce using rule 51 (postfix -> primary .)
    RParen          reduce using rule 51 (postfix -> primary .)
    Comma           reduce using rule 51 (postfix -> primary .)
    Colon           reduce using rule 51 (postfix -> primary .)
    RBracket        reduce using rule 51 (postfix -> primary .)


state 29

    (80) primary -> LParen . expression RParen
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 51
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 30

    (42) logical_and -> bit_or .
    (63) bit_or -> bit_or . BitOr xor

    And             reduce using rule 42 (logical_and -> bit_or .)
    Question        reduce using rule 42 (logical_and -> bit_or .)
    Or              reduce using rule 42 (logical_and -> bit_or .)
    Semi            reduce using rule 42 (logical_and -> bit_or .)
    RParen          reduce using rule 42 (logical_and -> bit_or .)
    Comma           reduce using rule 42 (logical_and -> bit_or .)
    Colon           reduce using rule 42 (logical_and -> bit_or .)
    RBracket        reduce using rule 42 (logical_and -> bit_or .)
    BitOr           shift and go to state 52


state 31

    (78) primary -> Integer .

    LBracket        reduce using rule 78 (primary -> Integer .)
    Assign          reduce using rule 78 (primary -> Integer .)
    Mul             reduce using rule 78 (primary -> Integer .)
    Div             reduce using rule 78 (primary -> Integer .)
    Mod             reduce using rule 78 (primary -> Integer .)
    Plus            reduce using rule 78 (primary -> Integer .)
    Minus           reduce using rule 78 (primary -> Integer .)
    Less            reduce using rule 78 (primary -> Integer .)
    Greater         reduce using rule 78 (primary -> Integer .)
    LessEqual       reduce using rule 78 (primary -> Integer .)
    GreaterEqual    reduce using rule 78 (primary -> Integer .)
    NotEqual        reduce using rule 78 (primary -> Integer .)
    Equal           reduce using rule 78 (primary -> Integer .)
    BitAnd          reduce using rule 78 (primary -> Integer .)
    Xor             reduce using rule 78 (primary -> Integer .)
    BitOr           reduce using rule 78 (primary -> Integer .)
    And             reduce using rule 78 (primary -> Integer .)
    Question        reduce using rule 78 (primary -> Integer .)
    Or              reduce using rule 78 (primary -> Integer .)
    Semi            reduce using rule 78 (primary -> Integer .)
    RParen          reduce using rule 78 (primary -> Integer .)
    Comma           reduce using rule 78 (primary -> Integer .)
    Colon           reduce using rule 78 (primary -> Integer .)
    RBracket        reduce using rule 78 (primary -> Integer .)


state 32

    (43) bit_or -> xor .
    (64) xor -> xor . Xor bit_and

    BitOr           reduce using rule 43 (bit_or -> xor .)
    And             reduce using rule 43 (bit_or -> xor .)
    Question        reduce using rule 43 (bit_or -> xor .)
    Or              reduce using rule 43 (bit_or -> xor .)
    Semi            reduce using rule 43 (bit_or -> xor .)
    RParen          reduce using rule 43 (bit_or -> xor .)
    Comma           reduce using rule 43 (bit_or -> xor .)
    Colon           reduce using rule 43 (bit_or -> xor .)
    RBracket        reduce using rule 43 (bit_or -> xor .)
    Xor             shift and go to state 53


state 33

    (44) xor -> bit_and .
    (65) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 44 (xor -> bit_and .)
    BitOr           reduce using rule 44 (xor -> bit_and .)
    And             reduce using rule 44 (xor -> bit_and .)
    Question        reduce using rule 44 (xor -> bit_and .)
    Or              reduce using rule 44 (xor -> bit_and .)
    Semi            reduce using rule 44 (xor -> bit_and .)
    RParen          reduce using rule 44 (xor -> bit_and .)
    Comma           reduce using rule 44 (xor -> bit_and .)
    Colon           reduce using rule 44 (xor -> bit_and .)
    RBracket        reduce using rule 44 (xor -> bit_and .)
    BitAnd          shift and go to state 54


state 34

    (45) bit_and -> equality .
    (66) equality -> equality . NotEqual relational
    (67) equality -> equality . Equal relational

    BitAnd          reduce using rule 45 (bit_and -> equality .)
    Xor             reduce using rule 45 (bit_and -> equality .)
    BitOr           reduce using rule 45 (bit_and -> equality .)
    And             reduce using rule 45 (bit_and -> equality .)
    Question        reduce using rule 45 (bit_and -> equality .)
    Or              reduce using rule 45 (bit_and -> equality .)
    Semi            reduce using rule 45 (bit_and -> equality .)
    RParen          reduce using rule 45 (bit_and -> equality .)
    Comma           reduce using rule 45 (bit_and -> equality .)
    Colon           reduce using rule 45 (bit_and -> equality .)
    RBracket        reduce using rule 45 (bit_and -> equality .)
    NotEqual        shift and go to state 55
    Equal           shift and go to state 56


state 35

    (46) equality -> relational .
    (68) relational -> relational . Less additive
    (69) relational -> relational . Greater additive
    (70) relational -> relational . LessEqual additive
    (71) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 46 (equality -> relational .)
    Equal           reduce using rule 46 (equality -> relational .)
    BitAnd          reduce using rule 46 (equality -> relational .)
    Xor             reduce using rule 46 (equality -> relational .)
    BitOr           reduce using rule 46 (equality -> relational .)
    And             reduce using rule 46 (equality -> relational .)
    Question        reduce using rule 46 (equality -> relational .)
    Or              reduce using rule 46 (equality -> relational .)
    Semi            reduce using rule 46 (equality -> relational .)
    RParen          reduce using rule 46 (equality -> relational .)
    Comma           reduce using rule 46 (equality -> relational .)
    Colon           reduce using rule 46 (equality -> relational .)
    RBracket        reduce using rule 46 (equality -> relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 36

    (47) relational -> additive .
    (72) additive -> additive . Plus multiplicative
    (73) additive -> additive . Minus multiplicative

    Less            reduce using rule 47 (relational -> additive .)
    Greater         reduce using rule 47 (relational -> additive .)
    LessEqual       reduce using rule 47 (relational -> additive .)
    GreaterEqual    reduce using rule 47 (relational -> additive .)
    NotEqual        reduce using rule 47 (relational -> additive .)
    Equal           reduce using rule 47 (relational -> additive .)
    BitAnd          reduce using rule 47 (relational -> additive .)
    Xor             reduce using rule 47 (relational -> additive .)
    BitOr           reduce using rule 47 (relational -> additive .)
    And             reduce using rule 47 (relational -> additive .)
    Question        reduce using rule 47 (relational -> additive .)
    Or              reduce using rule 47 (relational -> additive .)
    Semi            reduce using rule 47 (relational -> additive .)
    RParen          reduce using rule 47 (relational -> additive .)
    Comma           reduce using rule 47 (relational -> additive .)
    Colon           reduce using rule 47 (relational -> additive .)
    RBracket        reduce using rule 47 (relational -> additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 37

    (48) additive -> multiplicative .
    (74) multiplicative -> multiplicative . Mul unary
    (75) multiplicative -> multiplicative . Div unary
    (76) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 48 (additive -> multiplicative .)
    Minus           reduce using rule 48 (additive -> multiplicative .)
    Less            reduce using rule 48 (additive -> multiplicative .)
    Greater         reduce using rule 48 (additive -> multiplicative .)
    LessEqual       reduce using rule 48 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 48 (additive -> multiplicative .)
    NotEqual        reduce using rule 48 (additive -> multiplicative .)
    Equal           reduce using rule 48 (additive -> multiplicative .)
    BitAnd          reduce using rule 48 (additive -> multiplicative .)
    Xor             reduce using rule 48 (additive -> multiplicative .)
    BitOr           reduce using rule 48 (additive -> multiplicative .)
    And             reduce using rule 48 (additive -> multiplicative .)
    Question        reduce using rule 48 (additive -> multiplicative .)
    Or              reduce using rule 48 (additive -> multiplicative .)
    Semi            reduce using rule 48 (additive -> multiplicative .)
    RParen          reduce using rule 48 (additive -> multiplicative .)
    Comma           reduce using rule 48 (additive -> multiplicative .)
    Colon           reduce using rule 48 (additive -> multiplicative .)
    RBracket        reduce using rule 48 (additive -> multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 38

    (10) paramlist -> type Identifier .

    RParen          reduce using rule 10 (paramlist -> type Identifier .)
    Comma           reduce using rule 10 (paramlist -> type Identifier .)


state 39

    (6) function -> type Identifier LParen paramlist RParen . LBrace block RBrace
    (7) function -> type Identifier LParen paramlist RParen . Semi

    LBrace          shift and go to state 66
    Semi            shift and go to state 67


state 40

    (8) paramlist -> paramlist Comma . type Identifier
    (5) type -> . Int

    Int             shift and go to state 6

    type                           shift and go to state 68

state 41

    (37) arrayindex -> arrayindex LBracket Integer . RBracket

    RBracket        shift and go to state 69


state 42

    (55) postfix -> Identifier LParen . expression_list RParen
    (57) expression_list -> . expression_list Comma expression
    (58) expression_list -> . empty
    (59) expression_list -> . expression
    (1) empty -> .
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression_list                shift and go to state 70
    expression                     shift and go to state 71
    empty                          shift and go to state 72
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 43

    (60) assignment -> unary Assign . expression
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 21
    expression                     shift and go to state 73
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 44

    (77) conditional -> logical_or Question . expression Colon conditional
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    logical_or                     shift and go to state 22
    expression                     shift and go to state 74
    conditional                    shift and go to state 20
    assignment                     shift and go to state 19
    unary                          shift and go to state 21
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 45

    (61) logical_or -> logical_or Or . logical_and
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    logical_and                    shift and go to state 75
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 46

    (56) postfix -> postfix LBracket . expression RBracket
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    postfix                        shift and go to state 23
    expression                     shift and go to state 77
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 47

    (52) unary -> Minus unary .

    Assign          reduce using rule 52 (unary -> Minus unary .)
    Mul             reduce using rule 52 (unary -> Minus unary .)
    Div             reduce using rule 52 (unary -> Minus unary .)
    Mod             reduce using rule 52 (unary -> Minus unary .)
    Plus            reduce using rule 52 (unary -> Minus unary .)
    Minus           reduce using rule 52 (unary -> Minus unary .)
    Less            reduce using rule 52 (unary -> Minus unary .)
    Greater         reduce using rule 52 (unary -> Minus unary .)
    LessEqual       reduce using rule 52 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 52 (unary -> Minus unary .)
    NotEqual        reduce using rule 52 (unary -> Minus unary .)
    Equal           reduce using rule 52 (unary -> Minus unary .)
    BitAnd          reduce using rule 52 (unary -> Minus unary .)
    Xor             reduce using rule 52 (unary -> Minus unary .)
    BitOr           reduce using rule 52 (unary -> Minus unary .)
    And             reduce using rule 52 (unary -> Minus unary .)
    Question        reduce using rule 52 (unary -> Minus unary .)
    Or              reduce using rule 52 (unary -> Minus unary .)
    Semi            reduce using rule 52 (unary -> Minus unary .)
    RParen          reduce using rule 52 (unary -> Minus unary .)
    Comma           reduce using rule 52 (unary -> Minus unary .)
    Colon           reduce using rule 52 (unary -> Minus unary .)
    RBracket        reduce using rule 52 (unary -> Minus unary .)


state 48

    (53) unary -> BitNot unary .

    Assign          reduce using rule 53 (unary -> BitNot unary .)
    Mul             reduce using rule 53 (unary -> BitNot unary .)
    Div             reduce using rule 53 (unary -> BitNot unary .)
    Mod             reduce using rule 53 (unary -> BitNot unary .)
    Plus            reduce using rule 53 (unary -> BitNot unary .)
    Minus           reduce using rule 53 (unary -> BitNot unary .)
    Less            reduce using rule 53 (unary -> BitNot unary .)
    Greater         reduce using rule 53 (unary -> BitNot unary .)
    LessEqual       reduce using rule 53 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 53 (unary -> BitNot unary .)
    NotEqual        reduce using rule 53 (unary -> BitNot unary .)
    Equal           reduce using rule 53 (unary -> BitNot unary .)
    BitAnd          reduce using rule 53 (unary -> BitNot unary .)
    Xor             reduce using rule 53 (unary -> BitNot unary .)
    BitOr           reduce using rule 53 (unary -> BitNot unary .)
    And             reduce using rule 53 (unary -> BitNot unary .)
    Question        reduce using rule 53 (unary -> BitNot unary .)
    Or              reduce using rule 53 (unary -> BitNot unary .)
    Semi            reduce using rule 53 (unary -> BitNot unary .)
    RParen          reduce using rule 53 (unary -> BitNot unary .)
    Comma           reduce using rule 53 (unary -> BitNot unary .)
    Colon           reduce using rule 53 (unary -> BitNot unary .)
    RBracket        reduce using rule 53 (unary -> BitNot unary .)


state 49

    (54) unary -> Not unary .

    Assign          reduce using rule 54 (unary -> Not unary .)
    Mul             reduce using rule 54 (unary -> Not unary .)
    Div             reduce using rule 54 (unary -> Not unary .)
    Mod             reduce using rule 54 (unary -> Not unary .)
    Plus            reduce using rule 54 (unary -> Not unary .)
    Minus           reduce using rule 54 (unary -> Not unary .)
    Less            reduce using rule 54 (unary -> Not unary .)
    Greater         reduce using rule 54 (unary -> Not unary .)
    LessEqual       reduce using rule 54 (unary -> Not unary .)
    GreaterEqual    reduce using rule 54 (unary -> Not unary .)
    NotEqual        reduce using rule 54 (unary -> Not unary .)
    Equal           reduce using rule 54 (unary -> Not unary .)
    BitAnd          reduce using rule 54 (unary -> Not unary .)
    Xor             reduce using rule 54 (unary -> Not unary .)
    BitOr           reduce using rule 54 (unary -> Not unary .)
    And             reduce using rule 54 (unary -> Not unary .)
    Question        reduce using rule 54 (unary -> Not unary .)
    Or              reduce using rule 54 (unary -> Not unary .)
    Semi            reduce using rule 54 (unary -> Not unary .)
    RParen          reduce using rule 54 (unary -> Not unary .)
    Comma           reduce using rule 54 (unary -> Not unary .)
    Colon           reduce using rule 54 (unary -> Not unary .)
    RBracket        reduce using rule 54 (unary -> Not unary .)


state 50

    (62) logical_and -> logical_and And . bit_or
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    bit_or                         shift and go to state 78
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 51

    (80) primary -> LParen expression . RParen

    RParen          shift and go to state 79


state 52

    (63) bit_or -> bit_or BitOr . xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    xor                            shift and go to state 80
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 53

    (64) xor -> xor Xor . bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    bit_and                        shift and go to state 81
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 54

    (65) bit_and -> bit_and BitAnd . equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    equality                       shift and go to state 82
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 55

    (66) equality -> equality NotEqual . relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    relational                     shift and go to state 83
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 56

    (67) equality -> equality Equal . relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    relational                     shift and go to state 84
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 57

    (68) relational -> relational Less . additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    additive                       shift and go to state 85
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 58

    (69) relational -> relational Greater . additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    additive                       shift and go to state 86
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 59

    (70) relational -> relational LessEqual . additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    additive                       shift and go to state 87
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 60

    (71) relational -> relational GreaterEqual . additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    additive                       shift and go to state 88
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 61

    (72) additive -> additive Plus . multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    multiplicative                 shift and go to state 89
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 62

    (73) additive -> additive Minus . multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    multiplicative                 shift and go to state 90
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 63

    (74) multiplicative -> multiplicative Mul . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 91
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 64

    (75) multiplicative -> multiplicative Div . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 92
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 65

    (76) multiplicative -> multiplicative Mod . unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    unary                          shift and go to state 93
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 66

    (6) function -> type Identifier LParen paramlist RParen LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 94
    empty                          shift and go to state 95

state 67

    (7) function -> type Identifier LParen paramlist RParen Semi .

    Int             reduce using rule 7 (function -> type Identifier LParen paramlist RParen Semi .)
    $end            reduce using rule 7 (function -> type Identifier LParen paramlist RParen Semi .)


state 68

    (8) paramlist -> paramlist Comma type . Identifier

    Identifier      shift and go to state 96


state 69

    (37) arrayindex -> arrayindex LBracket Integer RBracket .

    LBracket        reduce using rule 37 (arrayindex -> arrayindex LBracket Integer RBracket .)
    Semi            reduce using rule 37 (arrayindex -> arrayindex LBracket Integer RBracket .)


state 70

    (55) postfix -> Identifier LParen expression_list . RParen
    (57) expression_list -> expression_list . Comma expression

    RParen          shift and go to state 97
    Comma           shift and go to state 98


state 71

    (59) expression_list -> expression .

    RParen          reduce using rule 59 (expression_list -> expression .)
    Comma           reduce using rule 59 (expression_list -> expression .)


state 72

    (58) expression_list -> empty .

    RParen          reduce using rule 58 (expression_list -> empty .)
    Comma           reduce using rule 58 (expression_list -> empty .)


state 73

    (60) assignment -> unary Assign expression .

    Semi            reduce using rule 60 (assignment -> unary Assign expression .)
    RParen          reduce using rule 60 (assignment -> unary Assign expression .)
    Comma           reduce using rule 60 (assignment -> unary Assign expression .)
    Colon           reduce using rule 60 (assignment -> unary Assign expression .)
    RBracket        reduce using rule 60 (assignment -> unary Assign expression .)


state 74

    (77) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 99


state 75

    (61) logical_or -> logical_or Or logical_and .
    (62) logical_and -> logical_and . And bit_or

    Question        reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    RBracket        reduce using rule 61 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 50


state 76

    (49) multiplicative -> unary .

    Mul             reduce using rule 49 (multiplicative -> unary .)
    Div             reduce using rule 49 (multiplicative -> unary .)
    Mod             reduce using rule 49 (multiplicative -> unary .)
    Plus            reduce using rule 49 (multiplicative -> unary .)
    Minus           reduce using rule 49 (multiplicative -> unary .)
    Less            reduce using rule 49 (multiplicative -> unary .)
    Greater         reduce using rule 49 (multiplicative -> unary .)
    LessEqual       reduce using rule 49 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 49 (multiplicative -> unary .)
    NotEqual        reduce using rule 49 (multiplicative -> unary .)
    Equal           reduce using rule 49 (multiplicative -> unary .)
    BitAnd          reduce using rule 49 (multiplicative -> unary .)
    Xor             reduce using rule 49 (multiplicative -> unary .)
    BitOr           reduce using rule 49 (multiplicative -> unary .)
    And             reduce using rule 49 (multiplicative -> unary .)
    Question        reduce using rule 49 (multiplicative -> unary .)
    Or              reduce using rule 49 (multiplicative -> unary .)
    Semi            reduce using rule 49 (multiplicative -> unary .)
    RParen          reduce using rule 49 (multiplicative -> unary .)
    Comma           reduce using rule 49 (multiplicative -> unary .)
    Colon           reduce using rule 49 (multiplicative -> unary .)
    RBracket        reduce using rule 49 (multiplicative -> unary .)


state 77

    (56) postfix -> postfix LBracket expression . RBracket

    RBracket        shift and go to state 100


state 78

    (62) logical_and -> logical_and And bit_or .
    (63) bit_or -> bit_or . BitOr xor

    And             reduce using rule 62 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 62 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 62 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 62 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 62 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 62 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 62 (logical_and -> logical_and And bit_or .)
    RBracket        reduce using rule 62 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 52


state 79

    (80) primary -> LParen expression RParen .

    LBracket        reduce using rule 80 (primary -> LParen expression RParen .)
    Assign          reduce using rule 80 (primary -> LParen expression RParen .)
    Mul             reduce using rule 80 (primary -> LParen expression RParen .)
    Div             reduce using rule 80 (primary -> LParen expression RParen .)
    Mod             reduce using rule 80 (primary -> LParen expression RParen .)
    Plus            reduce using rule 80 (primary -> LParen expression RParen .)
    Minus           reduce using rule 80 (primary -> LParen expression RParen .)
    Less            reduce using rule 80 (primary -> LParen expression RParen .)
    Greater         reduce using rule 80 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 80 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 80 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 80 (primary -> LParen expression RParen .)
    Equal           reduce using rule 80 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 80 (primary -> LParen expression RParen .)
    Xor             reduce using rule 80 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 80 (primary -> LParen expression RParen .)
    And             reduce using rule 80 (primary -> LParen expression RParen .)
    Question        reduce using rule 80 (primary -> LParen expression RParen .)
    Or              reduce using rule 80 (primary -> LParen expression RParen .)
    Semi            reduce using rule 80 (primary -> LParen expression RParen .)
    RParen          reduce using rule 80 (primary -> LParen expression RParen .)
    Comma           reduce using rule 80 (primary -> LParen expression RParen .)
    Colon           reduce using rule 80 (primary -> LParen expression RParen .)
    RBracket        reduce using rule 80 (primary -> LParen expression RParen .)


state 80

    (63) bit_or -> bit_or BitOr xor .
    (64) xor -> xor . Xor bit_and

    BitOr           reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    RBracket        reduce using rule 63 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 53


state 81

    (64) xor -> xor Xor bit_and .
    (65) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 64 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 64 (xor -> xor Xor bit_and .)
    And             reduce using rule 64 (xor -> xor Xor bit_and .)
    Question        reduce using rule 64 (xor -> xor Xor bit_and .)
    Or              reduce using rule 64 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 64 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 64 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 64 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 64 (xor -> xor Xor bit_and .)
    RBracket        reduce using rule 64 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 54


state 82

    (65) bit_and -> bit_and BitAnd equality .
    (66) equality -> equality . NotEqual relational
    (67) equality -> equality . Equal relational

    BitAnd          reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    RBracket        reduce using rule 65 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 55
    Equal           shift and go to state 56


state 83

    (66) equality -> equality NotEqual relational .
    (68) relational -> relational . Less additive
    (69) relational -> relational . Greater additive
    (70) relational -> relational . LessEqual additive
    (71) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 66 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 66 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 66 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 66 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 66 (equality -> equality NotEqual relational .)
    And             reduce using rule 66 (equality -> equality NotEqual relational .)
    Question        reduce using rule 66 (equality -> equality NotEqual relational .)
    Or              reduce using rule 66 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 66 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 66 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 66 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 66 (equality -> equality NotEqual relational .)
    RBracket        reduce using rule 66 (equality -> equality NotEqual relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 84

    (67) equality -> equality Equal relational .
    (68) relational -> relational . Less additive
    (69) relational -> relational . Greater additive
    (70) relational -> relational . LessEqual additive
    (71) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 67 (equality -> equality Equal relational .)
    Equal           reduce using rule 67 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 67 (equality -> equality Equal relational .)
    Xor             reduce using rule 67 (equality -> equality Equal relational .)
    BitOr           reduce using rule 67 (equality -> equality Equal relational .)
    And             reduce using rule 67 (equality -> equality Equal relational .)
    Question        reduce using rule 67 (equality -> equality Equal relational .)
    Or              reduce using rule 67 (equality -> equality Equal relational .)
    Semi            reduce using rule 67 (equality -> equality Equal relational .)
    RParen          reduce using rule 67 (equality -> equality Equal relational .)
    Comma           reduce using rule 67 (equality -> equality Equal relational .)
    Colon           reduce using rule 67 (equality -> equality Equal relational .)
    RBracket        reduce using rule 67 (equality -> equality Equal relational .)
    Less            shift and go to state 57
    Greater         shift and go to state 58
    LessEqual       shift and go to state 59
    GreaterEqual    shift and go to state 60


state 85

    (68) relational -> relational Less additive .
    (72) additive -> additive . Plus multiplicative
    (73) additive -> additive . Minus multiplicative

    Less            reduce using rule 68 (relational -> relational Less additive .)
    Greater         reduce using rule 68 (relational -> relational Less additive .)
    LessEqual       reduce using rule 68 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 68 (relational -> relational Less additive .)
    NotEqual        reduce using rule 68 (relational -> relational Less additive .)
    Equal           reduce using rule 68 (relational -> relational Less additive .)
    BitAnd          reduce using rule 68 (relational -> relational Less additive .)
    Xor             reduce using rule 68 (relational -> relational Less additive .)
    BitOr           reduce using rule 68 (relational -> relational Less additive .)
    And             reduce using rule 68 (relational -> relational Less additive .)
    Question        reduce using rule 68 (relational -> relational Less additive .)
    Or              reduce using rule 68 (relational -> relational Less additive .)
    Semi            reduce using rule 68 (relational -> relational Less additive .)
    RParen          reduce using rule 68 (relational -> relational Less additive .)
    Comma           reduce using rule 68 (relational -> relational Less additive .)
    Colon           reduce using rule 68 (relational -> relational Less additive .)
    RBracket        reduce using rule 68 (relational -> relational Less additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 86

    (69) relational -> relational Greater additive .
    (72) additive -> additive . Plus multiplicative
    (73) additive -> additive . Minus multiplicative

    Less            reduce using rule 69 (relational -> relational Greater additive .)
    Greater         reduce using rule 69 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 69 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 69 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 69 (relational -> relational Greater additive .)
    Equal           reduce using rule 69 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 69 (relational -> relational Greater additive .)
    Xor             reduce using rule 69 (relational -> relational Greater additive .)
    BitOr           reduce using rule 69 (relational -> relational Greater additive .)
    And             reduce using rule 69 (relational -> relational Greater additive .)
    Question        reduce using rule 69 (relational -> relational Greater additive .)
    Or              reduce using rule 69 (relational -> relational Greater additive .)
    Semi            reduce using rule 69 (relational -> relational Greater additive .)
    RParen          reduce using rule 69 (relational -> relational Greater additive .)
    Comma           reduce using rule 69 (relational -> relational Greater additive .)
    Colon           reduce using rule 69 (relational -> relational Greater additive .)
    RBracket        reduce using rule 69 (relational -> relational Greater additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 87

    (70) relational -> relational LessEqual additive .
    (72) additive -> additive . Plus multiplicative
    (73) additive -> additive . Minus multiplicative

    Less            reduce using rule 70 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 70 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 70 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 70 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 70 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 70 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 70 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 70 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 70 (relational -> relational LessEqual additive .)
    And             reduce using rule 70 (relational -> relational LessEqual additive .)
    Question        reduce using rule 70 (relational -> relational LessEqual additive .)
    Or              reduce using rule 70 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 70 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 70 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 70 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 70 (relational -> relational LessEqual additive .)
    RBracket        reduce using rule 70 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 88

    (71) relational -> relational GreaterEqual additive .
    (72) additive -> additive . Plus multiplicative
    (73) additive -> additive . Minus multiplicative

    Less            reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 71 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 71 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 71 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 71 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 71 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 71 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 71 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 71 (relational -> relational GreaterEqual additive .)
    RBracket        reduce using rule 71 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 61
    Minus           shift and go to state 62


state 89

    (72) additive -> additive Plus multiplicative .
    (74) multiplicative -> multiplicative . Mul unary
    (75) multiplicative -> multiplicative . Div unary
    (76) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 72 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 72 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 72 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 72 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 72 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 72 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 72 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 72 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 72 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 72 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 72 (additive -> additive Plus multiplicative .)
    And             reduce using rule 72 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 72 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 72 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 72 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 72 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 72 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 72 (additive -> additive Plus multiplicative .)
    RBracket        reduce using rule 72 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 90

    (73) additive -> additive Minus multiplicative .
    (74) multiplicative -> multiplicative . Mul unary
    (75) multiplicative -> multiplicative . Div unary
    (76) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 73 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 73 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 73 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 73 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 73 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 73 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 73 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 73 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 73 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 73 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 73 (additive -> additive Minus multiplicative .)
    And             reduce using rule 73 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 73 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 73 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 73 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 73 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 73 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 73 (additive -> additive Minus multiplicative .)
    RBracket        reduce using rule 73 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 63
    Div             shift and go to state 64
    Mod             shift and go to state 65


state 91

    (74) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 74 (multiplicative -> multiplicative Mul unary .)
    RBracket        reduce using rule 74 (multiplicative -> multiplicative Mul unary .)


state 92

    (75) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 75 (multiplicative -> multiplicative Div unary .)
    RBracket        reduce using rule 75 (multiplicative -> multiplicative Div unary .)


state 93

    (76) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 76 (multiplicative -> multiplicative Mod unary .)
    RBracket        reduce using rule 76 (multiplicative -> multiplicative Mod unary .)


state 94

    (6) function -> type Identifier LParen paramlist RParen LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (34) declaration -> . type Identifier arrayindex
    (35) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RBrace          shift and go to state 103
    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    type                           shift and go to state 101
    block_item                     shift and go to state 104
    statement                      shift and go to state 105
    declaration                    shift and go to state 106
    statement_matched              shift and go to state 107
    statement_unmatched            shift and go to state 108
    expression                     shift and go to state 109
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 95

    (12) block -> empty .

    RBrace          reduce using rule 12 (block -> empty .)
    If              reduce using rule 12 (block -> empty .)
    While           reduce using rule 12 (block -> empty .)
    For             reduce using rule 12 (block -> empty .)
    Do              reduce using rule 12 (block -> empty .)
    Return          reduce using rule 12 (block -> empty .)
    LBrace          reduce using rule 12 (block -> empty .)
    Break           reduce using rule 12 (block -> empty .)
    Continue        reduce using rule 12 (block -> empty .)
    Int             reduce using rule 12 (block -> empty .)
    Minus           reduce using rule 12 (block -> empty .)
    BitNot          reduce using rule 12 (block -> empty .)
    Not             reduce using rule 12 (block -> empty .)
    Identifier      reduce using rule 12 (block -> empty .)
    Integer         reduce using rule 12 (block -> empty .)
    LParen          reduce using rule 12 (block -> empty .)
    Semi            reduce using rule 12 (block -> empty .)


state 96

    (8) paramlist -> paramlist Comma type Identifier .

    RParen          reduce using rule 8 (paramlist -> paramlist Comma type Identifier .)
    Comma           reduce using rule 8 (paramlist -> paramlist Comma type Identifier .)


state 97

    (55) postfix -> Identifier LParen expression_list RParen .

    LBracket        reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Assign          reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Mul             reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)
    RBracket        reduce using rule 55 (postfix -> Identifier LParen expression_list RParen .)


state 98

    (57) expression_list -> expression_list Comma . expression
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 119
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 99

    (77) conditional -> logical_or Question expression Colon . conditional
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    logical_or                     shift and go to state 22
    conditional                    shift and go to state 120
    logical_and                    shift and go to state 27
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
    unary                          shift and go to state 76
    postfix                        shift and go to state 23
    primary                        shift and go to state 28

state 100

    (56) postfix -> postfix LBracket expression RBracket .

    LBracket        reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Assign          reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Mul             reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Div             reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Mod             reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Plus            reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Minus           reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Less            reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Greater         reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    LessEqual       reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    GreaterEqual    reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    NotEqual        reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Equal           reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    BitAnd          reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Xor             reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    BitOr           reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    And             reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Question        reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Or              reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Semi            reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    RParen          reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Comma           reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    Colon           reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)
    RBracket        reduce using rule 56 (postfix -> postfix LBracket expression RBracket .)


state 101

    (34) declaration -> type . Identifier arrayindex
    (35) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 121


state 102

    (29) statement_matched -> LBrace . block RBrace
    (11) block -> . block block_item
    (12) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 122
    empty                          shift and go to state 95

state 103

    (6) function -> type Identifier LParen paramlist RParen LBrace block RBrace .

    Int             reduce using rule 6 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)
    $end            reduce using rule 6 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)


state 104

    (11) block -> block block_item .

    RBrace          reduce using rule 11 (block -> block block_item .)
    If              reduce using rule 11 (block -> block block_item .)
    While           reduce using rule 11 (block -> block block_item .)
    For             reduce using rule 11 (block -> block block_item .)
    Do              reduce using rule 11 (block -> block block_item .)
    Return          reduce using rule 11 (block -> block block_item .)
    LBrace          reduce using rule 11 (block -> block block_item .)
    Break           reduce using rule 11 (block -> block block_item .)
    Continue        reduce using rule 11 (block -> block block_item .)
    Int             reduce using rule 11 (block -> block block_item .)
    Minus           reduce using rule 11 (block -> block block_item .)
    BitNot          reduce using rule 11 (block -> block block_item .)
    Not             reduce using rule 11 (block -> block block_item .)
    Identifier      reduce using rule 11 (block -> block block_item .)
    Integer         reduce using rule 11 (block -> block block_item .)
    LParen          reduce using rule 11 (block -> block block_item .)
    Semi            reduce using rule 11 (block -> block block_item .)


state 105

    (13) block_item -> statement .

    RBrace          reduce using rule 13 (block_item -> statement .)
    If              reduce using rule 13 (block_item -> statement .)
    While           reduce using rule 13 (block_item -> statement .)
    For             reduce using rule 13 (block_item -> statement .)
    Do              reduce using rule 13 (block_item -> statement .)
    Return          reduce using rule 13 (block_item -> statement .)
    LBrace          reduce using rule 13 (block_item -> statement .)
    Break           reduce using rule 13 (block_item -> statement .)
    Continue        reduce using rule 13 (block_item -> statement .)
    Int             reduce using rule 13 (block_item -> statement .)
    Minus           reduce using rule 13 (block_item -> statement .)
    BitNot          reduce using rule 13 (block_item -> statement .)
    Not             reduce using rule 13 (block_item -> statement .)
    Identifier      reduce using rule 13 (block_item -> statement .)
    Integer         reduce using rule 13 (block_item -> statement .)
    LParen          reduce using rule 13 (block_item -> statement .)
    Semi            reduce using rule 13 (block_item -> statement .)


state 106

    (14) block_item -> declaration . Semi

    Semi            shift and go to state 123


state 107

    (15) statement -> statement_matched .

    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 108

    (16) statement -> statement_unmatched .

    RBrace          reduce using rule 16 (statement -> statement_unmatched .)
    If              reduce using rule 16 (statement -> statement_unmatched .)
    While           reduce using rule 16 (statement -> statement_unmatched .)
    For             reduce using rule 16 (statement -> statement_unmatched .)
    Do              reduce using rule 16 (statement -> statement_unmatched .)
    Return          reduce using rule 16 (statement -> statement_unmatched .)
    LBrace          reduce using rule 16 (statement -> statement_unmatched .)
    Break           reduce using rule 16 (statement -> statement_unmatched .)
    Continue        reduce using rule 16 (statement -> statement_unmatched .)
    Int             reduce using rule 16 (statement -> statement_unmatched .)
    Minus           reduce using rule 16 (statement -> statement_unmatched .)
    BitNot          reduce using rule 16 (statement -> statement_unmatched .)
    Not             reduce using rule 16 (statement -> statement_unmatched .)
    Identifier      reduce using rule 16 (statement -> statement_unmatched .)
    Integer         reduce using rule 16 (statement -> statement_unmatched .)
    LParen          reduce using rule 16 (statement -> statement_unmatched .)
    Semi            reduce using rule 16 (statement -> statement_unmatched .)


state 109

    (32) opt_expression -> expression .

    Semi            reduce using rule 32 (opt_expression -> expression .)
    RParen          reduce using rule 32 (opt_expression -> expression .)


state 110

    (17) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 124


state 111

    (20) statement_matched -> While . LParen expression RParen statement_matched
    (21) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 125


state 112

    (22) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 126


state 113

    (28) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 127


state 114

    (26) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    statement_matched              shift and go to state 128
    expression                     shift and go to state 109
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 115

    (27) statement_matched -> Return . expression Semi
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 132
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 116

    (30) statement_matched -> Break . Semi

    Semi            shift and go to state 133


state 117

    (31) statement_matched -> Continue . Semi

    Semi            shift and go to state 134


state 118

    (33) opt_expression -> empty .

    Semi            reduce using rule 33 (opt_expression -> empty .)
    RParen          reduce using rule 33 (opt_expression -> empty .)


state 119

    (57) expression_list -> expression_list Comma expression .

    RParen          reduce using rule 57 (expression_list -> expression_list Comma expression .)
    Comma           reduce using rule 57 (expression_list -> expression_list Comma expression .)


state 120

    (77) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 77 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 77 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 77 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 77 (conditional -> logical_or Question expression Colon conditional .)
    RBracket        reduce using rule 77 (conditional -> logical_or Question expression Colon conditional .)


state 121

    (34) declaration -> type Identifier . arrayindex
    (35) declaration -> type Identifier . Assign expression
    (36) arrayindex -> . empty
    (37) arrayindex -> . arrayindex LBracket Integer RBracket
    (1) empty -> .

    Assign          shift and go to state 11
    LBracket        reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    arrayindex                     shift and go to state 10
    empty                          shift and go to state 12

state 122

    (29) statement_matched -> LBrace block . RBrace
    (11) block -> block . block_item
    (13) block_item -> . statement
    (14) block_item -> . declaration Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (34) declaration -> . type Identifier arrayindex
    (35) declaration -> . type Identifier Assign expression
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RBrace          shift and go to state 135
    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Int             shift and go to state 6
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    block_item                     shift and go to state 104
    statement                      shift and go to state 105
    declaration                    shift and go to state 106
    statement_matched              shift and go to state 107
    statement_unmatched            shift and go to state 108
    type                           shift and go to state 101
    expression                     shift and go to state 109
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 123

    (14) block_item -> declaration Semi .

    RBrace          reduce using rule 14 (block_item -> declaration Semi .)
    If              reduce using rule 14 (block_item -> declaration Semi .)
    While           reduce using rule 14 (block_item -> declaration Semi .)
    For             reduce using rule 14 (block_item -> declaration Semi .)
    Do              reduce using rule 14 (block_item -> declaration Semi .)
    Return          reduce using rule 14 (block_item -> declaration Semi .)
    LBrace          reduce using rule 14 (block_item -> declaration Semi .)
    Break           reduce using rule 14 (block_item -> declaration Semi .)
    Continue        reduce using rule 14 (block_item -> declaration Semi .)
    Int             reduce using rule 14 (block_item -> declaration Semi .)
    Minus           reduce using rule 14 (block_item -> declaration Semi .)
    BitNot          reduce using rule 14 (block_item -> declaration Semi .)
    Not             reduce using rule 14 (block_item -> declaration Semi .)
    Identifier      reduce using rule 14 (block_item -> declaration Semi .)
    Integer         reduce using rule 14 (block_item -> declaration Semi .)
    LParen          reduce using rule 14 (block_item -> declaration Semi .)
    Semi            reduce using rule 14 (block_item -> declaration Semi .)


state 124

    (17) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen . expression RParen statement
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 136
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 125

    (20) statement_matched -> While LParen . expression RParen statement_matched
    (21) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 137
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 126

    (22) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (34) declaration -> . type Identifier arrayindex
    (35) declaration -> . type Identifier Assign expression
    (38) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 138
    declaration                    shift and go to state 139
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    type                           shift and go to state 101
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 127

    (28) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 28 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 28 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 28 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 28 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 28 (statement_matched -> opt_expression Semi .)


state 128

    (26) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 140


state 129

    (20) statement_matched -> While . LParen expression RParen statement_matched

    LParen          shift and go to state 141


state 130

    (17) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched

    LParen          shift and go to state 142


state 131

    (22) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 143


state 132

    (27) statement_matched -> Return expression . Semi

    Semi            shift and go to state 144


state 133

    (30) statement_matched -> Break Semi .

    RBrace          reduce using rule 30 (statement_matched -> Break Semi .)
    If              reduce using rule 30 (statement_matched -> Break Semi .)
    While           reduce using rule 30 (statement_matched -> Break Semi .)
    For             reduce using rule 30 (statement_matched -> Break Semi .)
    Do              reduce using rule 30 (statement_matched -> Break Semi .)
    Return          reduce using rule 30 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 30 (statement_matched -> Break Semi .)
    Break           reduce using rule 30 (statement_matched -> Break Semi .)
    Continue        reduce using rule 30 (statement_matched -> Break Semi .)
    Int             reduce using rule 30 (statement_matched -> Break Semi .)
    Minus           reduce using rule 30 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 30 (statement_matched -> Break Semi .)
    Not             reduce using rule 30 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 30 (statement_matched -> Break Semi .)
    Integer         reduce using rule 30 (statement_matched -> Break Semi .)
    LParen          reduce using rule 30 (statement_matched -> Break Semi .)
    Semi            reduce using rule 30 (statement_matched -> Break Semi .)
    Else            reduce using rule 30 (statement_matched -> Break Semi .)


state 134

    (31) statement_matched -> Continue Semi .

    RBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    If              reduce using rule 31 (statement_matched -> Continue Semi .)
    While           reduce using rule 31 (statement_matched -> Continue Semi .)
    For             reduce using rule 31 (statement_matched -> Continue Semi .)
    Do              reduce using rule 31 (statement_matched -> Continue Semi .)
    Return          reduce using rule 31 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 31 (statement_matched -> Continue Semi .)
    Break           reduce using rule 31 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 31 (statement_matched -> Continue Semi .)
    Int             reduce using rule 31 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 31 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 31 (statement_matched -> Continue Semi .)
    Not             reduce using rule 31 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 31 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 31 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 31 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 31 (statement_matched -> Continue Semi .)
    Else            reduce using rule 31 (statement_matched -> Continue Semi .)


state 135

    (29) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 29 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 29 (statement_matched -> LBrace block RBrace .)


state 136

    (17) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 145


state 137

    (20) statement_matched -> While LParen expression . RParen statement_matched
    (21) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 146


state 138

    (22) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 147


state 139

    (23) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 148


state 140

    (26) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 149


state 141

    (20) statement_matched -> While LParen . expression RParen statement_matched
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 150
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 142

    (17) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 151
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 143

    (22) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (34) declaration -> . type Identifier arrayindex
    (35) declaration -> . type Identifier Assign expression
    (38) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 6
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 152
    declaration                    shift and go to state 153
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    type                           shift and go to state 101
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 144

    (27) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 27 (statement_matched -> Return expression Semi .)
    If              reduce using rule 27 (statement_matched -> Return expression Semi .)
    While           reduce using rule 27 (statement_matched -> Return expression Semi .)
    For             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 27 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 27 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 27 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 27 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 27 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 27 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 27 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 27 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 27 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 27 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 27 (statement_matched -> Return expression Semi .)


state 145

    (17) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (19) statement_unmatched -> If LParen expression RParen . statement
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (15) statement -> . statement_matched
    (16) statement -> . statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 154
    statement_unmatched            shift and go to state 108
    statement                      shift and go to state 155
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 146

    (20) statement_matched -> While LParen expression RParen . statement_matched
    (21) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 156
    statement_unmatched            shift and go to state 157
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 147

    (22) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 158
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 148

    (23) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 159
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 149

    (26) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (38) expression -> . assignment
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 160
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 150

    (20) statement_matched -> While LParen expression . RParen statement_matched

    RParen          shift and go to state 161


state 151

    (17) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched

    RParen          shift and go to state 162


state 152

    (22) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 163


state 153

    (23) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 164


state 154

    (17) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (15) statement -> statement_matched .

    Else            shift and go to state 165
    RBrace          reduce using rule 15 (statement -> statement_matched .)
    If              reduce using rule 15 (statement -> statement_matched .)
    While           reduce using rule 15 (statement -> statement_matched .)
    For             reduce using rule 15 (statement -> statement_matched .)
    Do              reduce using rule 15 (statement -> statement_matched .)
    Return          reduce using rule 15 (statement -> statement_matched .)
    LBrace          reduce using rule 15 (statement -> statement_matched .)
    Break           reduce using rule 15 (statement -> statement_matched .)
    Continue        reduce using rule 15 (statement -> statement_matched .)
    Int             reduce using rule 15 (statement -> statement_matched .)
    Minus           reduce using rule 15 (statement -> statement_matched .)
    BitNot          reduce using rule 15 (statement -> statement_matched .)
    Not             reduce using rule 15 (statement -> statement_matched .)
    Identifier      reduce using rule 15 (statement -> statement_matched .)
    Integer         reduce using rule 15 (statement -> statement_matched .)
    LParen          reduce using rule 15 (statement -> statement_matched .)
    Semi            reduce using rule 15 (statement -> statement_matched .)


state 155

    (19) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 19 (statement_unmatched -> If LParen expression RParen statement .)


state 156

    (20) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 20 (statement_matched -> While LParen expression RParen statement_matched .)


state 157

    (21) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 21 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 158

    (22) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 166


state 159

    (23) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 167


state 160

    (26) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 168


state 161

    (20) statement_matched -> While LParen expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 156
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 162

    (17) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 169
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 163

    (22) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 170
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 164

    (23) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 171
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 165

    (17) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (18) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 172
    statement_unmatched            shift and go to state 173
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 166

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RParen          reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 174
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 167

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RParen          reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 175
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 168

    (26) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 176


state 169

    (17) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched

    Else            shift and go to state 177


state 170

    (22) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 178


state 171

    (23) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 179


state 172

    (17) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 17 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 173

    (18) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 174

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 180


state 175

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 181


state 176

    (26) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 177

    (17) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    expression                     shift and go to state 109
    statement_matched              shift and go to state 172
    opt_expression                 shift and go to state 113
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 178

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RParen          reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 182
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 179

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    RParen          reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 183
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 180

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 113
    statement_matched              shift and go to state 184
    statement_unmatched            shift and go to state 185
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 181

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (18) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (19) statement_unmatched -> . If LParen expression RParen statement
    (21) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (25) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 110
    While           shift and go to state 111
    For             shift and go to state 112
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 113
    statement_matched              shift and go to state 186
    statement_unmatched            shift and go to state 187
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 182

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 188


state 183

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 189


state 184

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 185

    (24) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 186

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 23 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 187

    (25) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 188

    (22) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 113
    statement_matched              shift and go to state 184
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37

state 189

    (23) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (17) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (20) statement_matched -> . While LParen expression RParen statement_matched
    (22) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (27) statement_matched -> . Return expression Semi
    (28) statement_matched -> . opt_expression Semi
    (29) statement_matched -> . LBrace block RBrace
    (30) statement_matched -> . Break Semi
    (31) statement_matched -> . Continue Semi
    (32) opt_expression -> . expression
    (33) opt_expression -> . empty
    (38) expression -> . assignment
    (1) empty -> .
    (39) assignment -> . conditional
    (60) assignment -> . unary Assign expression
    (40) conditional -> . logical_or
    (77) conditional -> . logical_or Question expression Colon conditional
    (50) unary -> . postfix
    (52) unary -> . Minus unary
    (53) unary -> . BitNot unary
    (54) unary -> . Not unary
    (41) logical_or -> . logical_and
    (61) logical_or -> . logical_or Or logical_and
    (51) postfix -> . primary
    (55) postfix -> . Identifier LParen expression_list RParen
    (56) postfix -> . postfix LBracket expression RBracket
    (42) logical_and -> . bit_or
    (62) logical_and -> . logical_and And bit_or
    (78) primary -> . Integer
    (79) primary -> . Identifier
    (80) primary -> . LParen expression RParen
    (43) bit_or -> . xor
    (63) bit_or -> . bit_or BitOr xor
    (44) xor -> . bit_and
    (64) xor -> . xor Xor bit_and
    (45) bit_and -> . equality
    (65) bit_and -> . bit_and BitAnd equality
    (46) equality -> . relational
    (66) equality -> . equality NotEqual relational
    (67) equality -> . equality Equal relational
    (47) relational -> . additive
    (68) relational -> . relational Less additive
    (69) relational -> . relational Greater additive
    (70) relational -> . relational LessEqual additive
    (71) relational -> . relational GreaterEqual additive
    (48) additive -> . multiplicative
    (72) additive -> . additive Plus multiplicative
    (73) additive -> . additive Minus multiplicative
    (49) multiplicative -> . unary
    (74) multiplicative -> . multiplicative Mul unary
    (75) multiplicative -> . multiplicative Div unary
    (76) multiplicative -> . multiplicative Mod unary

    If              shift and go to state 130
    While           shift and go to state 129
    For             shift and go to state 131
    Do              shift and go to state 114
    Return          shift and go to state 115
    LBrace          shift and go to state 102
    Break           shift and go to state 116
    Continue        shift and go to state 117
    Semi            reduce using rule 1 (empty -> .)
    Minus           shift and go to state 24
    BitNot          shift and go to state 25
    Not             shift and go to state 26
    Identifier      shift and go to state 17
    Integer         shift and go to state 31
    LParen          shift and go to state 29

    opt_expression                 shift and go to state 113
    statement_matched              shift and go to state 186
    expression                     shift and go to state 109
    empty                          shift and go to state 118
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    unary                          shift and go to state 21
    logical_or                     shift and go to state 22
    postfix                        shift and go to state 23
    logical_and                    shift and go to state 27
    primary                        shift and go to state 28
    bit_or                         shift and go to state 30
    xor                            shift and go to state 32
    bit_and                        shift and go to state 33
    equality                       shift and go to state 34
    relational                     shift and go to state 35
    additive                       shift and go to state 36
    multiplicative                 shift and go to state 37
