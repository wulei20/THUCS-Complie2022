Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> empty
Rule 4     type -> Int
Rule 5     function -> type Identifier LParen paramlist RParen LBrace block RBrace
Rule 6     function -> type Identifier LParen paramlist RParen Semi
Rule 7     paramlist -> paramlist Comma type Identifier
Rule 8     paramlist -> empty
Rule 9     paramlist -> type Identifier
Rule 10    block -> block block_item
Rule 11    block -> empty
Rule 12    block_item -> statement
Rule 13    block_item -> declaration Semi
Rule 14    statement -> statement_matched
Rule 15    statement -> statement_unmatched
Rule 16    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 17    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 18    statement_unmatched -> If LParen expression RParen statement
Rule 19    statement_matched -> While LParen expression RParen statement_matched
Rule 20    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 21    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 22    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 23    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 24    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 25    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 26    statement_matched -> Return expression Semi
Rule 27    statement_matched -> opt_expression Semi
Rule 28    statement_matched -> LBrace block RBrace
Rule 29    statement_matched -> Break Semi
Rule 30    statement_matched -> Continue Semi
Rule 31    opt_expression -> expression
Rule 32    opt_expression -> empty
Rule 33    declaration -> type Identifier
Rule 34    declaration -> type Identifier Assign expression
Rule 35    expression -> assignment
Rule 36    assignment -> conditional
Rule 37    conditional -> logical_or
Rule 38    logical_or -> logical_and
Rule 39    logical_and -> bit_or
Rule 40    bit_or -> xor
Rule 41    xor -> bit_and
Rule 42    bit_and -> equality
Rule 43    equality -> relational
Rule 44    relational -> additive
Rule 45    additive -> multiplicative
Rule 46    multiplicative -> unary
Rule 47    unary -> postfix
Rule 48    postfix -> primary
Rule 49    unary -> Minus unary
Rule 50    unary -> BitNot unary
Rule 51    unary -> Not unary
Rule 52    postfix -> Identifier LParen expression_list RParen
Rule 53    expression_list -> expression_list Comma expression
Rule 54    expression_list -> empty
Rule 55    expression_list -> expression
Rule 56    assignment -> Identifier Assign expression
Rule 57    logical_or -> logical_or Or logical_and
Rule 58    logical_and -> logical_and And bit_or
Rule 59    bit_or -> bit_or BitOr xor
Rule 60    xor -> xor Xor bit_and
Rule 61    bit_and -> bit_and BitAnd equality
Rule 62    equality -> equality NotEqual relational
Rule 63    equality -> equality Equal relational
Rule 64    relational -> relational Less additive
Rule 65    relational -> relational Greater additive
Rule 66    relational -> relational LessEqual additive
Rule 67    relational -> relational GreaterEqual additive
Rule 68    additive -> additive Plus multiplicative
Rule 69    additive -> additive Minus multiplicative
Rule 70    multiplicative -> multiplicative Mul unary
Rule 71    multiplicative -> multiplicative Div unary
Rule 72    multiplicative -> multiplicative Mod unary
Rule 73    conditional -> logical_or Question expression Colon conditional
Rule 74    primary -> Integer
Rule 75    primary -> Identifier
Rule 76    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 58
Assign               : 34 56
BitAnd               : 61
BitNot               : 50
BitOr                : 59
Break                : 29
Colon                : 73
Comma                : 7 53
Continue             : 30
Div                  : 71
Do                   : 25
Else                 : 16 17
Equal                : 63
For                  : 21 22 23 24
Greater              : 65
GreaterEqual         : 67
Identifier           : 5 6 7 9 33 34 52 56 75
If                   : 16 17 18
Int                  : 4
Integer              : 74
LBrace               : 5 28
LParen               : 5 6 16 17 18 19 20 21 22 23 24 25 52 76
Less                 : 64
LessEqual            : 66
Minus                : 49 69
Mod                  : 72
Mul                  : 70
Not                  : 51
NotEqual             : 62
Or                   : 57
Plus                 : 68
Question             : 73
RBrace               : 5 28
RParen               : 5 6 16 17 18 19 20 21 22 23 24 25 52 76
Return               : 26
Semi                 : 6 13 21 21 22 22 23 23 24 24 25 26 27 29 30
While                : 19 20 25
Xor                  : 60
error                : 

Nonterminals, with rules where they appear

additive             : 44 64 65 66 67 68 69
assignment           : 35
bit_and              : 41 60 61
bit_or               : 39 58 59
block                : 5 10 28
block_item           : 10
conditional          : 36 73
declaration          : 13 22 24
empty                : 3 8 11 32 54
equality             : 42 61 62 63
expression           : 16 17 18 19 20 25 26 31 34 53 55 56 73 76
expression_list      : 52 53
function             : 2
logical_and          : 38 57 58
logical_or           : 37 57 73
multiplicative       : 45 68 69 70 71 72
opt_expression       : 21 21 21 22 22 23 23 23 24 24 27
paramlist            : 5 6 7
postfix              : 47
primary              : 48
program              : 2 0
relational           : 43 62 63 64 65 66 67
statement            : 12 18
statement_matched    : 14 16 16 17 19 21 22 25
statement_unmatched  : 15 17 20 23 24
type                 : 5 6 7 9 33 34
unary                : 46 49 50 51 70 71 72
xor                  : 40 59 60

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (5) function -> . type Identifier LParen paramlist RParen LBrace block RBrace
    (6) function -> . type Identifier LParen paramlist RParen Semi
    (4) type -> . Int

    Int             shift and go to state 5

    function                       shift and go to state 3
    type                           shift and go to state 4

state 2

    (3) program -> empty .

    Int             reduce using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (5) function -> type . Identifier LParen paramlist RParen LBrace block RBrace
    (6) function -> type . Identifier LParen paramlist RParen Semi

    Identifier      shift and go to state 6


state 5

    (4) type -> Int .

    Identifier      reduce using rule 4 (type -> Int .)


state 6

    (5) function -> type Identifier . LParen paramlist RParen LBrace block RBrace
    (6) function -> type Identifier . LParen paramlist RParen Semi

    LParen          shift and go to state 7


state 7

    (5) function -> type Identifier LParen . paramlist RParen LBrace block RBrace
    (6) function -> type Identifier LParen . paramlist RParen Semi
    (7) paramlist -> . paramlist Comma type Identifier
    (8) paramlist -> . empty
    (9) paramlist -> . type Identifier
    (1) empty -> .
    (4) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 5

    type                           shift and go to state 8
    paramlist                      shift and go to state 9
    empty                          shift and go to state 10

state 8

    (9) paramlist -> type . Identifier

    Identifier      shift and go to state 11


state 9

    (5) function -> type Identifier LParen paramlist . RParen LBrace block RBrace
    (6) function -> type Identifier LParen paramlist . RParen Semi
    (7) paramlist -> paramlist . Comma type Identifier

    RParen          shift and go to state 12
    Comma           shift and go to state 13


state 10

    (8) paramlist -> empty .

    RParen          reduce using rule 8 (paramlist -> empty .)
    Comma           reduce using rule 8 (paramlist -> empty .)


state 11

    (9) paramlist -> type Identifier .

    RParen          reduce using rule 9 (paramlist -> type Identifier .)
    Comma           reduce using rule 9 (paramlist -> type Identifier .)


state 12

    (5) function -> type Identifier LParen paramlist RParen . LBrace block RBrace
    (6) function -> type Identifier LParen paramlist RParen . Semi

    LBrace          shift and go to state 14
    Semi            shift and go to state 15


state 13

    (7) paramlist -> paramlist Comma . type Identifier
    (4) type -> . Int

    Int             shift and go to state 5

    type                           shift and go to state 16

state 14

    (5) function -> type Identifier LParen paramlist RParen LBrace . block RBrace
    (10) block -> . block block_item
    (11) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 17
    empty                          shift and go to state 18

state 15

    (6) function -> type Identifier LParen paramlist RParen Semi .

    Int             reduce using rule 6 (function -> type Identifier LParen paramlist RParen Semi .)
    $end            reduce using rule 6 (function -> type Identifier LParen paramlist RParen Semi .)


state 16

    (7) paramlist -> paramlist Comma type . Identifier

    Identifier      shift and go to state 19


state 17

    (5) function -> type Identifier LParen paramlist RParen LBrace block . RBrace
    (10) block -> block . block_item
    (12) block_item -> . statement
    (13) block_item -> . declaration Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (33) declaration -> . type Identifier
    (34) declaration -> . type Identifier Assign expression
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (4) type -> . Int
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RBrace          shift and go to state 24
    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    type                           shift and go to state 20
    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 18

    (11) block -> empty .

    RBrace          reduce using rule 11 (block -> empty .)
    If              reduce using rule 11 (block -> empty .)
    While           reduce using rule 11 (block -> empty .)
    For             reduce using rule 11 (block -> empty .)
    Do              reduce using rule 11 (block -> empty .)
    Return          reduce using rule 11 (block -> empty .)
    LBrace          reduce using rule 11 (block -> empty .)
    Break           reduce using rule 11 (block -> empty .)
    Continue        reduce using rule 11 (block -> empty .)
    Int             reduce using rule 11 (block -> empty .)
    Identifier      reduce using rule 11 (block -> empty .)
    Minus           reduce using rule 11 (block -> empty .)
    BitNot          reduce using rule 11 (block -> empty .)
    Not             reduce using rule 11 (block -> empty .)
    Integer         reduce using rule 11 (block -> empty .)
    LParen          reduce using rule 11 (block -> empty .)
    Semi            reduce using rule 11 (block -> empty .)


state 19

    (7) paramlist -> paramlist Comma type Identifier .

    RParen          reduce using rule 7 (paramlist -> paramlist Comma type Identifier .)
    Comma           reduce using rule 7 (paramlist -> paramlist Comma type Identifier .)


state 20

    (33) declaration -> type . Identifier
    (34) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 58


state 21

    (56) assignment -> Identifier . Assign expression
    (52) postfix -> Identifier . LParen expression_list RParen
    (75) primary -> Identifier .

    Assign          shift and go to state 59
    LParen          shift and go to state 60
    Mul             reduce using rule 75 (primary -> Identifier .)
    Div             reduce using rule 75 (primary -> Identifier .)
    Mod             reduce using rule 75 (primary -> Identifier .)
    Plus            reduce using rule 75 (primary -> Identifier .)
    Minus           reduce using rule 75 (primary -> Identifier .)
    Less            reduce using rule 75 (primary -> Identifier .)
    Greater         reduce using rule 75 (primary -> Identifier .)
    LessEqual       reduce using rule 75 (primary -> Identifier .)
    GreaterEqual    reduce using rule 75 (primary -> Identifier .)
    NotEqual        reduce using rule 75 (primary -> Identifier .)
    Equal           reduce using rule 75 (primary -> Identifier .)
    BitAnd          reduce using rule 75 (primary -> Identifier .)
    Xor             reduce using rule 75 (primary -> Identifier .)
    BitOr           reduce using rule 75 (primary -> Identifier .)
    And             reduce using rule 75 (primary -> Identifier .)
    Question        reduce using rule 75 (primary -> Identifier .)
    Or              reduce using rule 75 (primary -> Identifier .)
    Semi            reduce using rule 75 (primary -> Identifier .)
    RParen          reduce using rule 75 (primary -> Identifier .)
    Comma           reduce using rule 75 (primary -> Identifier .)
    Colon           reduce using rule 75 (primary -> Identifier .)


state 22

    (76) primary -> LParen . expression RParen
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 61
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 23

    (28) statement_matched -> LBrace . block RBrace
    (10) block -> . block block_item
    (11) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 62
    empty                          shift and go to state 18

state 24

    (5) function -> type Identifier LParen paramlist RParen LBrace block RBrace .

    Int             reduce using rule 5 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)
    $end            reduce using rule 5 (function -> type Identifier LParen paramlist RParen LBrace block RBrace .)


state 25

    (10) block -> block block_item .

    RBrace          reduce using rule 10 (block -> block block_item .)
    If              reduce using rule 10 (block -> block block_item .)
    While           reduce using rule 10 (block -> block block_item .)
    For             reduce using rule 10 (block -> block block_item .)
    Do              reduce using rule 10 (block -> block block_item .)
    Return          reduce using rule 10 (block -> block block_item .)
    LBrace          reduce using rule 10 (block -> block block_item .)
    Break           reduce using rule 10 (block -> block block_item .)
    Continue        reduce using rule 10 (block -> block block_item .)
    Int             reduce using rule 10 (block -> block block_item .)
    Identifier      reduce using rule 10 (block -> block block_item .)
    Minus           reduce using rule 10 (block -> block block_item .)
    BitNot          reduce using rule 10 (block -> block block_item .)
    Not             reduce using rule 10 (block -> block block_item .)
    Integer         reduce using rule 10 (block -> block block_item .)
    LParen          reduce using rule 10 (block -> block block_item .)
    Semi            reduce using rule 10 (block -> block block_item .)


state 26

    (12) block_item -> statement .

    RBrace          reduce using rule 12 (block_item -> statement .)
    If              reduce using rule 12 (block_item -> statement .)
    While           reduce using rule 12 (block_item -> statement .)
    For             reduce using rule 12 (block_item -> statement .)
    Do              reduce using rule 12 (block_item -> statement .)
    Return          reduce using rule 12 (block_item -> statement .)
    LBrace          reduce using rule 12 (block_item -> statement .)
    Break           reduce using rule 12 (block_item -> statement .)
    Continue        reduce using rule 12 (block_item -> statement .)
    Int             reduce using rule 12 (block_item -> statement .)
    Identifier      reduce using rule 12 (block_item -> statement .)
    Minus           reduce using rule 12 (block_item -> statement .)
    BitNot          reduce using rule 12 (block_item -> statement .)
    Not             reduce using rule 12 (block_item -> statement .)
    Integer         reduce using rule 12 (block_item -> statement .)
    LParen          reduce using rule 12 (block_item -> statement .)
    Semi            reduce using rule 12 (block_item -> statement .)


state 27

    (13) block_item -> declaration . Semi

    Semi            shift and go to state 63


state 28

    (14) statement -> statement_matched .

    RBrace          reduce using rule 14 (statement -> statement_matched .)
    If              reduce using rule 14 (statement -> statement_matched .)
    While           reduce using rule 14 (statement -> statement_matched .)
    For             reduce using rule 14 (statement -> statement_matched .)
    Do              reduce using rule 14 (statement -> statement_matched .)
    Return          reduce using rule 14 (statement -> statement_matched .)
    LBrace          reduce using rule 14 (statement -> statement_matched .)
    Break           reduce using rule 14 (statement -> statement_matched .)
    Continue        reduce using rule 14 (statement -> statement_matched .)
    Int             reduce using rule 14 (statement -> statement_matched .)
    Identifier      reduce using rule 14 (statement -> statement_matched .)
    Minus           reduce using rule 14 (statement -> statement_matched .)
    BitNot          reduce using rule 14 (statement -> statement_matched .)
    Not             reduce using rule 14 (statement -> statement_matched .)
    Integer         reduce using rule 14 (statement -> statement_matched .)
    LParen          reduce using rule 14 (statement -> statement_matched .)
    Semi            reduce using rule 14 (statement -> statement_matched .)


state 29

    (15) statement -> statement_unmatched .

    RBrace          reduce using rule 15 (statement -> statement_unmatched .)
    If              reduce using rule 15 (statement -> statement_unmatched .)
    While           reduce using rule 15 (statement -> statement_unmatched .)
    For             reduce using rule 15 (statement -> statement_unmatched .)
    Do              reduce using rule 15 (statement -> statement_unmatched .)
    Return          reduce using rule 15 (statement -> statement_unmatched .)
    LBrace          reduce using rule 15 (statement -> statement_unmatched .)
    Break           reduce using rule 15 (statement -> statement_unmatched .)
    Continue        reduce using rule 15 (statement -> statement_unmatched .)
    Int             reduce using rule 15 (statement -> statement_unmatched .)
    Identifier      reduce using rule 15 (statement -> statement_unmatched .)
    Minus           reduce using rule 15 (statement -> statement_unmatched .)
    BitNot          reduce using rule 15 (statement -> statement_unmatched .)
    Not             reduce using rule 15 (statement -> statement_unmatched .)
    Integer         reduce using rule 15 (statement -> statement_unmatched .)
    LParen          reduce using rule 15 (statement -> statement_unmatched .)
    Semi            reduce using rule 15 (statement -> statement_unmatched .)


state 30

    (31) opt_expression -> expression .

    Semi            reduce using rule 31 (opt_expression -> expression .)
    RParen          reduce using rule 31 (opt_expression -> expression .)


state 31

    (16) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 64


state 32

    (19) statement_matched -> While . LParen expression RParen statement_matched
    (20) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 65


state 33

    (21) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 66


state 34

    (27) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 67


state 35

    (25) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    statement_matched              shift and go to state 68
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 36

    (26) statement_matched -> Return . expression Semi
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 72
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 37

    (29) statement_matched -> Break . Semi

    Semi            shift and go to state 73


state 38

    (30) statement_matched -> Continue . Semi

    Semi            shift and go to state 74


state 39

    (32) opt_expression -> empty .

    Semi            reduce using rule 32 (opt_expression -> empty .)
    RParen          reduce using rule 32 (opt_expression -> empty .)


state 40

    (35) expression -> assignment .

    Semi            reduce using rule 35 (expression -> assignment .)
    RParen          reduce using rule 35 (expression -> assignment .)
    Comma           reduce using rule 35 (expression -> assignment .)
    Colon           reduce using rule 35 (expression -> assignment .)


state 41

    (36) assignment -> conditional .

    Semi            reduce using rule 36 (assignment -> conditional .)
    RParen          reduce using rule 36 (assignment -> conditional .)
    Comma           reduce using rule 36 (assignment -> conditional .)
    Colon           reduce using rule 36 (assignment -> conditional .)


state 42

    (37) conditional -> logical_or .
    (73) conditional -> logical_or . Question expression Colon conditional
    (57) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 37 (conditional -> logical_or .)
    RParen          reduce using rule 37 (conditional -> logical_or .)
    Comma           reduce using rule 37 (conditional -> logical_or .)
    Colon           reduce using rule 37 (conditional -> logical_or .)
    Question        shift and go to state 75
    Or              shift and go to state 76


state 43

    (38) logical_or -> logical_and .
    (58) logical_and -> logical_and . And bit_or

    Question        reduce using rule 38 (logical_or -> logical_and .)
    Or              reduce using rule 38 (logical_or -> logical_and .)
    Semi            reduce using rule 38 (logical_or -> logical_and .)
    RParen          reduce using rule 38 (logical_or -> logical_and .)
    Comma           reduce using rule 38 (logical_or -> logical_and .)
    Colon           reduce using rule 38 (logical_or -> logical_and .)
    And             shift and go to state 77


state 44

    (39) logical_and -> bit_or .
    (59) bit_or -> bit_or . BitOr xor

    And             reduce using rule 39 (logical_and -> bit_or .)
    Question        reduce using rule 39 (logical_and -> bit_or .)
    Or              reduce using rule 39 (logical_and -> bit_or .)
    Semi            reduce using rule 39 (logical_and -> bit_or .)
    RParen          reduce using rule 39 (logical_and -> bit_or .)
    Comma           reduce using rule 39 (logical_and -> bit_or .)
    Colon           reduce using rule 39 (logical_and -> bit_or .)
    BitOr           shift and go to state 78


state 45

    (40) bit_or -> xor .
    (60) xor -> xor . Xor bit_and

    BitOr           reduce using rule 40 (bit_or -> xor .)
    And             reduce using rule 40 (bit_or -> xor .)
    Question        reduce using rule 40 (bit_or -> xor .)
    Or              reduce using rule 40 (bit_or -> xor .)
    Semi            reduce using rule 40 (bit_or -> xor .)
    RParen          reduce using rule 40 (bit_or -> xor .)
    Comma           reduce using rule 40 (bit_or -> xor .)
    Colon           reduce using rule 40 (bit_or -> xor .)
    Xor             shift and go to state 79


state 46

    (41) xor -> bit_and .
    (61) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 41 (xor -> bit_and .)
    BitOr           reduce using rule 41 (xor -> bit_and .)
    And             reduce using rule 41 (xor -> bit_and .)
    Question        reduce using rule 41 (xor -> bit_and .)
    Or              reduce using rule 41 (xor -> bit_and .)
    Semi            reduce using rule 41 (xor -> bit_and .)
    RParen          reduce using rule 41 (xor -> bit_and .)
    Comma           reduce using rule 41 (xor -> bit_and .)
    Colon           reduce using rule 41 (xor -> bit_and .)
    BitAnd          shift and go to state 80


state 47

    (42) bit_and -> equality .
    (62) equality -> equality . NotEqual relational
    (63) equality -> equality . Equal relational

    BitAnd          reduce using rule 42 (bit_and -> equality .)
    Xor             reduce using rule 42 (bit_and -> equality .)
    BitOr           reduce using rule 42 (bit_and -> equality .)
    And             reduce using rule 42 (bit_and -> equality .)
    Question        reduce using rule 42 (bit_and -> equality .)
    Or              reduce using rule 42 (bit_and -> equality .)
    Semi            reduce using rule 42 (bit_and -> equality .)
    RParen          reduce using rule 42 (bit_and -> equality .)
    Comma           reduce using rule 42 (bit_and -> equality .)
    Colon           reduce using rule 42 (bit_and -> equality .)
    NotEqual        shift and go to state 81
    Equal           shift and go to state 82


state 48

    (43) equality -> relational .
    (64) relational -> relational . Less additive
    (65) relational -> relational . Greater additive
    (66) relational -> relational . LessEqual additive
    (67) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 43 (equality -> relational .)
    Equal           reduce using rule 43 (equality -> relational .)
    BitAnd          reduce using rule 43 (equality -> relational .)
    Xor             reduce using rule 43 (equality -> relational .)
    BitOr           reduce using rule 43 (equality -> relational .)
    And             reduce using rule 43 (equality -> relational .)
    Question        reduce using rule 43 (equality -> relational .)
    Or              reduce using rule 43 (equality -> relational .)
    Semi            reduce using rule 43 (equality -> relational .)
    RParen          reduce using rule 43 (equality -> relational .)
    Comma           reduce using rule 43 (equality -> relational .)
    Colon           reduce using rule 43 (equality -> relational .)
    Less            shift and go to state 83
    Greater         shift and go to state 84
    LessEqual       shift and go to state 85
    GreaterEqual    shift and go to state 86


state 49

    (44) relational -> additive .
    (68) additive -> additive . Plus multiplicative
    (69) additive -> additive . Minus multiplicative

    Less            reduce using rule 44 (relational -> additive .)
    Greater         reduce using rule 44 (relational -> additive .)
    LessEqual       reduce using rule 44 (relational -> additive .)
    GreaterEqual    reduce using rule 44 (relational -> additive .)
    NotEqual        reduce using rule 44 (relational -> additive .)
    Equal           reduce using rule 44 (relational -> additive .)
    BitAnd          reduce using rule 44 (relational -> additive .)
    Xor             reduce using rule 44 (relational -> additive .)
    BitOr           reduce using rule 44 (relational -> additive .)
    And             reduce using rule 44 (relational -> additive .)
    Question        reduce using rule 44 (relational -> additive .)
    Or              reduce using rule 44 (relational -> additive .)
    Semi            reduce using rule 44 (relational -> additive .)
    RParen          reduce using rule 44 (relational -> additive .)
    Comma           reduce using rule 44 (relational -> additive .)
    Colon           reduce using rule 44 (relational -> additive .)
    Plus            shift and go to state 87
    Minus           shift and go to state 88


state 50

    (45) additive -> multiplicative .
    (70) multiplicative -> multiplicative . Mul unary
    (71) multiplicative -> multiplicative . Div unary
    (72) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 45 (additive -> multiplicative .)
    Minus           reduce using rule 45 (additive -> multiplicative .)
    Less            reduce using rule 45 (additive -> multiplicative .)
    Greater         reduce using rule 45 (additive -> multiplicative .)
    LessEqual       reduce using rule 45 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 45 (additive -> multiplicative .)
    NotEqual        reduce using rule 45 (additive -> multiplicative .)
    Equal           reduce using rule 45 (additive -> multiplicative .)
    BitAnd          reduce using rule 45 (additive -> multiplicative .)
    Xor             reduce using rule 45 (additive -> multiplicative .)
    BitOr           reduce using rule 45 (additive -> multiplicative .)
    And             reduce using rule 45 (additive -> multiplicative .)
    Question        reduce using rule 45 (additive -> multiplicative .)
    Or              reduce using rule 45 (additive -> multiplicative .)
    Semi            reduce using rule 45 (additive -> multiplicative .)
    RParen          reduce using rule 45 (additive -> multiplicative .)
    Comma           reduce using rule 45 (additive -> multiplicative .)
    Colon           reduce using rule 45 (additive -> multiplicative .)
    Mul             shift and go to state 89
    Div             shift and go to state 90
    Mod             shift and go to state 91


state 51

    (49) unary -> Minus . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 92
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 52

    (46) multiplicative -> unary .

    Mul             reduce using rule 46 (multiplicative -> unary .)
    Div             reduce using rule 46 (multiplicative -> unary .)
    Mod             reduce using rule 46 (multiplicative -> unary .)
    Plus            reduce using rule 46 (multiplicative -> unary .)
    Minus           reduce using rule 46 (multiplicative -> unary .)
    Less            reduce using rule 46 (multiplicative -> unary .)
    Greater         reduce using rule 46 (multiplicative -> unary .)
    LessEqual       reduce using rule 46 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 46 (multiplicative -> unary .)
    NotEqual        reduce using rule 46 (multiplicative -> unary .)
    Equal           reduce using rule 46 (multiplicative -> unary .)
    BitAnd          reduce using rule 46 (multiplicative -> unary .)
    Xor             reduce using rule 46 (multiplicative -> unary .)
    BitOr           reduce using rule 46 (multiplicative -> unary .)
    And             reduce using rule 46 (multiplicative -> unary .)
    Question        reduce using rule 46 (multiplicative -> unary .)
    Or              reduce using rule 46 (multiplicative -> unary .)
    Semi            reduce using rule 46 (multiplicative -> unary .)
    RParen          reduce using rule 46 (multiplicative -> unary .)
    Comma           reduce using rule 46 (multiplicative -> unary .)
    Colon           reduce using rule 46 (multiplicative -> unary .)


state 53

    (47) unary -> postfix .

    Mul             reduce using rule 47 (unary -> postfix .)
    Div             reduce using rule 47 (unary -> postfix .)
    Mod             reduce using rule 47 (unary -> postfix .)
    Plus            reduce using rule 47 (unary -> postfix .)
    Minus           reduce using rule 47 (unary -> postfix .)
    Less            reduce using rule 47 (unary -> postfix .)
    Greater         reduce using rule 47 (unary -> postfix .)
    LessEqual       reduce using rule 47 (unary -> postfix .)
    GreaterEqual    reduce using rule 47 (unary -> postfix .)
    NotEqual        reduce using rule 47 (unary -> postfix .)
    Equal           reduce using rule 47 (unary -> postfix .)
    BitAnd          reduce using rule 47 (unary -> postfix .)
    Xor             reduce using rule 47 (unary -> postfix .)
    BitOr           reduce using rule 47 (unary -> postfix .)
    And             reduce using rule 47 (unary -> postfix .)
    Question        reduce using rule 47 (unary -> postfix .)
    Or              reduce using rule 47 (unary -> postfix .)
    Semi            reduce using rule 47 (unary -> postfix .)
    RParen          reduce using rule 47 (unary -> postfix .)
    Comma           reduce using rule 47 (unary -> postfix .)
    Colon           reduce using rule 47 (unary -> postfix .)


state 54

    (50) unary -> BitNot . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 94
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 55

    (51) unary -> Not . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 95
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 56

    (48) postfix -> primary .

    Mul             reduce using rule 48 (postfix -> primary .)
    Div             reduce using rule 48 (postfix -> primary .)
    Mod             reduce using rule 48 (postfix -> primary .)
    Plus            reduce using rule 48 (postfix -> primary .)
    Minus           reduce using rule 48 (postfix -> primary .)
    Less            reduce using rule 48 (postfix -> primary .)
    Greater         reduce using rule 48 (postfix -> primary .)
    LessEqual       reduce using rule 48 (postfix -> primary .)
    GreaterEqual    reduce using rule 48 (postfix -> primary .)
    NotEqual        reduce using rule 48 (postfix -> primary .)
    Equal           reduce using rule 48 (postfix -> primary .)
    BitAnd          reduce using rule 48 (postfix -> primary .)
    Xor             reduce using rule 48 (postfix -> primary .)
    BitOr           reduce using rule 48 (postfix -> primary .)
    And             reduce using rule 48 (postfix -> primary .)
    Question        reduce using rule 48 (postfix -> primary .)
    Or              reduce using rule 48 (postfix -> primary .)
    Semi            reduce using rule 48 (postfix -> primary .)
    RParen          reduce using rule 48 (postfix -> primary .)
    Comma           reduce using rule 48 (postfix -> primary .)
    Colon           reduce using rule 48 (postfix -> primary .)


state 57

    (74) primary -> Integer .

    Mul             reduce using rule 74 (primary -> Integer .)
    Div             reduce using rule 74 (primary -> Integer .)
    Mod             reduce using rule 74 (primary -> Integer .)
    Plus            reduce using rule 74 (primary -> Integer .)
    Minus           reduce using rule 74 (primary -> Integer .)
    Less            reduce using rule 74 (primary -> Integer .)
    Greater         reduce using rule 74 (primary -> Integer .)
    LessEqual       reduce using rule 74 (primary -> Integer .)
    GreaterEqual    reduce using rule 74 (primary -> Integer .)
    NotEqual        reduce using rule 74 (primary -> Integer .)
    Equal           reduce using rule 74 (primary -> Integer .)
    BitAnd          reduce using rule 74 (primary -> Integer .)
    Xor             reduce using rule 74 (primary -> Integer .)
    BitOr           reduce using rule 74 (primary -> Integer .)
    And             reduce using rule 74 (primary -> Integer .)
    Question        reduce using rule 74 (primary -> Integer .)
    Or              reduce using rule 74 (primary -> Integer .)
    Semi            reduce using rule 74 (primary -> Integer .)
    RParen          reduce using rule 74 (primary -> Integer .)
    Comma           reduce using rule 74 (primary -> Integer .)
    Colon           reduce using rule 74 (primary -> Integer .)


state 58

    (33) declaration -> type Identifier .
    (34) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 33 (declaration -> type Identifier .)
    Assign          shift and go to state 96


state 59

    (56) assignment -> Identifier Assign . expression
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 97
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 60

    (52) postfix -> Identifier LParen . expression_list RParen
    (53) expression_list -> . expression_list Comma expression
    (54) expression_list -> . empty
    (55) expression_list -> . expression
    (1) empty -> .
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression_list                shift and go to state 98
    expression                     shift and go to state 99
    empty                          shift and go to state 100
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 61

    (76) primary -> LParen expression . RParen

    RParen          shift and go to state 101


state 62

    (28) statement_matched -> LBrace block . RBrace
    (10) block -> block . block_item
    (12) block_item -> . statement
    (13) block_item -> . declaration Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (33) declaration -> . type Identifier
    (34) declaration -> . type Identifier Assign expression
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (4) type -> . Int
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RBrace          shift and go to state 102
    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    block_item                     shift and go to state 25
    statement                      shift and go to state 26
    declaration                    shift and go to state 27
    statement_matched              shift and go to state 28
    statement_unmatched            shift and go to state 29
    type                           shift and go to state 20
    expression                     shift and go to state 30
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 63

    (13) block_item -> declaration Semi .

    RBrace          reduce using rule 13 (block_item -> declaration Semi .)
    If              reduce using rule 13 (block_item -> declaration Semi .)
    While           reduce using rule 13 (block_item -> declaration Semi .)
    For             reduce using rule 13 (block_item -> declaration Semi .)
    Do              reduce using rule 13 (block_item -> declaration Semi .)
    Return          reduce using rule 13 (block_item -> declaration Semi .)
    LBrace          reduce using rule 13 (block_item -> declaration Semi .)
    Break           reduce using rule 13 (block_item -> declaration Semi .)
    Continue        reduce using rule 13 (block_item -> declaration Semi .)
    Int             reduce using rule 13 (block_item -> declaration Semi .)
    Identifier      reduce using rule 13 (block_item -> declaration Semi .)
    Minus           reduce using rule 13 (block_item -> declaration Semi .)
    BitNot          reduce using rule 13 (block_item -> declaration Semi .)
    Not             reduce using rule 13 (block_item -> declaration Semi .)
    Integer         reduce using rule 13 (block_item -> declaration Semi .)
    LParen          reduce using rule 13 (block_item -> declaration Semi .)
    Semi            reduce using rule 13 (block_item -> declaration Semi .)


state 64

    (16) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen . expression RParen statement
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 103
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 65

    (19) statement_matched -> While LParen . expression RParen statement_matched
    (20) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 104
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 66

    (21) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (33) declaration -> . type Identifier
    (34) declaration -> . type Identifier Assign expression
    (35) expression -> . assignment
    (1) empty -> .
    (4) type -> . Int
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 5
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 105
    declaration                    shift and go to state 106
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    type                           shift and go to state 20
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 67

    (27) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 27 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 27 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 27 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 27 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 27 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 27 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 27 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 27 (statement_matched -> opt_expression Semi .)


state 68

    (25) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 107


state 69

    (19) statement_matched -> While . LParen expression RParen statement_matched

    LParen          shift and go to state 108


state 70

    (16) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched

    LParen          shift and go to state 109


state 71

    (21) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 110


state 72

    (26) statement_matched -> Return expression . Semi

    Semi            shift and go to state 111


state 73

    (29) statement_matched -> Break Semi .

    RBrace          reduce using rule 29 (statement_matched -> Break Semi .)
    If              reduce using rule 29 (statement_matched -> Break Semi .)
    While           reduce using rule 29 (statement_matched -> Break Semi .)
    For             reduce using rule 29 (statement_matched -> Break Semi .)
    Do              reduce using rule 29 (statement_matched -> Break Semi .)
    Return          reduce using rule 29 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 29 (statement_matched -> Break Semi .)
    Break           reduce using rule 29 (statement_matched -> Break Semi .)
    Continue        reduce using rule 29 (statement_matched -> Break Semi .)
    Int             reduce using rule 29 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 29 (statement_matched -> Break Semi .)
    Minus           reduce using rule 29 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 29 (statement_matched -> Break Semi .)
    Not             reduce using rule 29 (statement_matched -> Break Semi .)
    Integer         reduce using rule 29 (statement_matched -> Break Semi .)
    LParen          reduce using rule 29 (statement_matched -> Break Semi .)
    Semi            reduce using rule 29 (statement_matched -> Break Semi .)
    Else            reduce using rule 29 (statement_matched -> Break Semi .)


state 74

    (30) statement_matched -> Continue Semi .

    RBrace          reduce using rule 30 (statement_matched -> Continue Semi .)
    If              reduce using rule 30 (statement_matched -> Continue Semi .)
    While           reduce using rule 30 (statement_matched -> Continue Semi .)
    For             reduce using rule 30 (statement_matched -> Continue Semi .)
    Do              reduce using rule 30 (statement_matched -> Continue Semi .)
    Return          reduce using rule 30 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 30 (statement_matched -> Continue Semi .)
    Break           reduce using rule 30 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 30 (statement_matched -> Continue Semi .)
    Int             reduce using rule 30 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 30 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 30 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 30 (statement_matched -> Continue Semi .)
    Not             reduce using rule 30 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 30 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 30 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 30 (statement_matched -> Continue Semi .)
    Else            reduce using rule 30 (statement_matched -> Continue Semi .)


state 75

    (73) conditional -> logical_or Question . expression Colon conditional
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    expression                     shift and go to state 112
    conditional                    shift and go to state 41
    assignment                     shift and go to state 40
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 76

    (57) logical_or -> logical_or Or . logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_and                    shift and go to state 113
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 77

    (58) logical_and -> logical_and And . bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_or                         shift and go to state 114
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 78

    (59) bit_or -> bit_or BitOr . xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    xor                            shift and go to state 115
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 79

    (60) xor -> xor Xor . bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    bit_and                        shift and go to state 116
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 80

    (61) bit_and -> bit_and BitAnd . equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    equality                       shift and go to state 117
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 81

    (62) equality -> equality NotEqual . relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 118
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 82

    (63) equality -> equality Equal . relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    relational                     shift and go to state 119
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 83

    (64) relational -> relational Less . additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 120
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 84

    (65) relational -> relational Greater . additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 121
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 85

    (66) relational -> relational LessEqual . additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 122
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 86

    (67) relational -> relational GreaterEqual . additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    additive                       shift and go to state 123
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 87

    (68) additive -> additive Plus . multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 124
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 88

    (69) additive -> additive Minus . multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    multiplicative                 shift and go to state 125
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 89

    (70) multiplicative -> multiplicative Mul . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 126
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 90

    (71) multiplicative -> multiplicative Div . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 127
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 91

    (72) multiplicative -> multiplicative Mod . unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    unary                          shift and go to state 128
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 92

    (49) unary -> Minus unary .

    Mul             reduce using rule 49 (unary -> Minus unary .)
    Div             reduce using rule 49 (unary -> Minus unary .)
    Mod             reduce using rule 49 (unary -> Minus unary .)
    Plus            reduce using rule 49 (unary -> Minus unary .)
    Minus           reduce using rule 49 (unary -> Minus unary .)
    Less            reduce using rule 49 (unary -> Minus unary .)
    Greater         reduce using rule 49 (unary -> Minus unary .)
    LessEqual       reduce using rule 49 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 49 (unary -> Minus unary .)
    NotEqual        reduce using rule 49 (unary -> Minus unary .)
    Equal           reduce using rule 49 (unary -> Minus unary .)
    BitAnd          reduce using rule 49 (unary -> Minus unary .)
    Xor             reduce using rule 49 (unary -> Minus unary .)
    BitOr           reduce using rule 49 (unary -> Minus unary .)
    And             reduce using rule 49 (unary -> Minus unary .)
    Question        reduce using rule 49 (unary -> Minus unary .)
    Or              reduce using rule 49 (unary -> Minus unary .)
    Semi            reduce using rule 49 (unary -> Minus unary .)
    RParen          reduce using rule 49 (unary -> Minus unary .)
    Comma           reduce using rule 49 (unary -> Minus unary .)
    Colon           reduce using rule 49 (unary -> Minus unary .)


state 93

    (52) postfix -> Identifier . LParen expression_list RParen
    (75) primary -> Identifier .

    LParen          shift and go to state 60
    Mul             reduce using rule 75 (primary -> Identifier .)
    Div             reduce using rule 75 (primary -> Identifier .)
    Mod             reduce using rule 75 (primary -> Identifier .)
    Plus            reduce using rule 75 (primary -> Identifier .)
    Minus           reduce using rule 75 (primary -> Identifier .)
    Less            reduce using rule 75 (primary -> Identifier .)
    Greater         reduce using rule 75 (primary -> Identifier .)
    LessEqual       reduce using rule 75 (primary -> Identifier .)
    GreaterEqual    reduce using rule 75 (primary -> Identifier .)
    NotEqual        reduce using rule 75 (primary -> Identifier .)
    Equal           reduce using rule 75 (primary -> Identifier .)
    BitAnd          reduce using rule 75 (primary -> Identifier .)
    Xor             reduce using rule 75 (primary -> Identifier .)
    BitOr           reduce using rule 75 (primary -> Identifier .)
    And             reduce using rule 75 (primary -> Identifier .)
    Question        reduce using rule 75 (primary -> Identifier .)
    Or              reduce using rule 75 (primary -> Identifier .)
    Semi            reduce using rule 75 (primary -> Identifier .)
    RParen          reduce using rule 75 (primary -> Identifier .)
    Comma           reduce using rule 75 (primary -> Identifier .)
    Colon           reduce using rule 75 (primary -> Identifier .)


state 94

    (50) unary -> BitNot unary .

    Mul             reduce using rule 50 (unary -> BitNot unary .)
    Div             reduce using rule 50 (unary -> BitNot unary .)
    Mod             reduce using rule 50 (unary -> BitNot unary .)
    Plus            reduce using rule 50 (unary -> BitNot unary .)
    Minus           reduce using rule 50 (unary -> BitNot unary .)
    Less            reduce using rule 50 (unary -> BitNot unary .)
    Greater         reduce using rule 50 (unary -> BitNot unary .)
    LessEqual       reduce using rule 50 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 50 (unary -> BitNot unary .)
    NotEqual        reduce using rule 50 (unary -> BitNot unary .)
    Equal           reduce using rule 50 (unary -> BitNot unary .)
    BitAnd          reduce using rule 50 (unary -> BitNot unary .)
    Xor             reduce using rule 50 (unary -> BitNot unary .)
    BitOr           reduce using rule 50 (unary -> BitNot unary .)
    And             reduce using rule 50 (unary -> BitNot unary .)
    Question        reduce using rule 50 (unary -> BitNot unary .)
    Or              reduce using rule 50 (unary -> BitNot unary .)
    Semi            reduce using rule 50 (unary -> BitNot unary .)
    RParen          reduce using rule 50 (unary -> BitNot unary .)
    Comma           reduce using rule 50 (unary -> BitNot unary .)
    Colon           reduce using rule 50 (unary -> BitNot unary .)


state 95

    (51) unary -> Not unary .

    Mul             reduce using rule 51 (unary -> Not unary .)
    Div             reduce using rule 51 (unary -> Not unary .)
    Mod             reduce using rule 51 (unary -> Not unary .)
    Plus            reduce using rule 51 (unary -> Not unary .)
    Minus           reduce using rule 51 (unary -> Not unary .)
    Less            reduce using rule 51 (unary -> Not unary .)
    Greater         reduce using rule 51 (unary -> Not unary .)
    LessEqual       reduce using rule 51 (unary -> Not unary .)
    GreaterEqual    reduce using rule 51 (unary -> Not unary .)
    NotEqual        reduce using rule 51 (unary -> Not unary .)
    Equal           reduce using rule 51 (unary -> Not unary .)
    BitAnd          reduce using rule 51 (unary -> Not unary .)
    Xor             reduce using rule 51 (unary -> Not unary .)
    BitOr           reduce using rule 51 (unary -> Not unary .)
    And             reduce using rule 51 (unary -> Not unary .)
    Question        reduce using rule 51 (unary -> Not unary .)
    Or              reduce using rule 51 (unary -> Not unary .)
    Semi            reduce using rule 51 (unary -> Not unary .)
    RParen          reduce using rule 51 (unary -> Not unary .)
    Comma           reduce using rule 51 (unary -> Not unary .)
    Colon           reduce using rule 51 (unary -> Not unary .)


state 96

    (34) declaration -> type Identifier Assign . expression
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 129
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 97

    (56) assignment -> Identifier Assign expression .

    Semi            reduce using rule 56 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 56 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 56 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 56 (assignment -> Identifier Assign expression .)


state 98

    (52) postfix -> Identifier LParen expression_list . RParen
    (53) expression_list -> expression_list . Comma expression

    RParen          shift and go to state 130
    Comma           shift and go to state 131


state 99

    (55) expression_list -> expression .

    RParen          reduce using rule 55 (expression_list -> expression .)
    Comma           reduce using rule 55 (expression_list -> expression .)


state 100

    (54) expression_list -> empty .

    RParen          reduce using rule 54 (expression_list -> empty .)
    Comma           reduce using rule 54 (expression_list -> empty .)


state 101

    (76) primary -> LParen expression RParen .

    Mul             reduce using rule 76 (primary -> LParen expression RParen .)
    Div             reduce using rule 76 (primary -> LParen expression RParen .)
    Mod             reduce using rule 76 (primary -> LParen expression RParen .)
    Plus            reduce using rule 76 (primary -> LParen expression RParen .)
    Minus           reduce using rule 76 (primary -> LParen expression RParen .)
    Less            reduce using rule 76 (primary -> LParen expression RParen .)
    Greater         reduce using rule 76 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 76 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 76 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 76 (primary -> LParen expression RParen .)
    Equal           reduce using rule 76 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 76 (primary -> LParen expression RParen .)
    Xor             reduce using rule 76 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 76 (primary -> LParen expression RParen .)
    And             reduce using rule 76 (primary -> LParen expression RParen .)
    Question        reduce using rule 76 (primary -> LParen expression RParen .)
    Or              reduce using rule 76 (primary -> LParen expression RParen .)
    Semi            reduce using rule 76 (primary -> LParen expression RParen .)
    RParen          reduce using rule 76 (primary -> LParen expression RParen .)
    Comma           reduce using rule 76 (primary -> LParen expression RParen .)
    Colon           reduce using rule 76 (primary -> LParen expression RParen .)


state 102

    (28) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 28 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 28 (statement_matched -> LBrace block RBrace .)


state 103

    (16) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 132


state 104

    (19) statement_matched -> While LParen expression . RParen statement_matched
    (20) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 133


state 105

    (21) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (23) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 134


state 106

    (22) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 135


state 107

    (25) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 136


state 108

    (19) statement_matched -> While LParen . expression RParen statement_matched
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 137
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 109

    (16) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 138
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 110

    (21) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (33) declaration -> . type Identifier
    (34) declaration -> . type Identifier Assign expression
    (35) expression -> . assignment
    (1) empty -> .
    (4) type -> . Int
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 5
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 139
    declaration                    shift and go to state 140
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    type                           shift and go to state 20
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 111

    (26) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 26 (statement_matched -> Return expression Semi .)
    If              reduce using rule 26 (statement_matched -> Return expression Semi .)
    While           reduce using rule 26 (statement_matched -> Return expression Semi .)
    For             reduce using rule 26 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 26 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 26 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 26 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 26 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 26 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 26 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 26 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 26 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 26 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 26 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 26 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 26 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 26 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 26 (statement_matched -> Return expression Semi .)


state 112

    (73) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 141


state 113

    (57) logical_or -> logical_or Or logical_and .
    (58) logical_and -> logical_and . And bit_or

    Question        reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 57 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 77


state 114

    (58) logical_and -> logical_and And bit_or .
    (59) bit_or -> bit_or . BitOr xor

    And             reduce using rule 58 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 58 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 58 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 58 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 58 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 58 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 58 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 78


state 115

    (59) bit_or -> bit_or BitOr xor .
    (60) xor -> xor . Xor bit_and

    BitOr           reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 59 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 79


state 116

    (60) xor -> xor Xor bit_and .
    (61) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 60 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 60 (xor -> xor Xor bit_and .)
    And             reduce using rule 60 (xor -> xor Xor bit_and .)
    Question        reduce using rule 60 (xor -> xor Xor bit_and .)
    Or              reduce using rule 60 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 60 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 60 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 60 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 60 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 80


state 117

    (61) bit_and -> bit_and BitAnd equality .
    (62) equality -> equality . NotEqual relational
    (63) equality -> equality . Equal relational

    BitAnd          reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 61 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 81
    Equal           shift and go to state 82


state 118

    (62) equality -> equality NotEqual relational .
    (64) relational -> relational . Less additive
    (65) relational -> relational . Greater additive
    (66) relational -> relational . LessEqual additive
    (67) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 62 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 62 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 62 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 62 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 62 (equality -> equality NotEqual relational .)
    And             reduce using rule 62 (equality -> equality NotEqual relational .)
    Question        reduce using rule 62 (equality -> equality NotEqual relational .)
    Or              reduce using rule 62 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 62 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 62 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 62 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 62 (equality -> equality NotEqual relational .)
    Less            shift and go to state 83
    Greater         shift and go to state 84
    LessEqual       shift and go to state 85
    GreaterEqual    shift and go to state 86


state 119

    (63) equality -> equality Equal relational .
    (64) relational -> relational . Less additive
    (65) relational -> relational . Greater additive
    (66) relational -> relational . LessEqual additive
    (67) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 63 (equality -> equality Equal relational .)
    Equal           reduce using rule 63 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 63 (equality -> equality Equal relational .)
    Xor             reduce using rule 63 (equality -> equality Equal relational .)
    BitOr           reduce using rule 63 (equality -> equality Equal relational .)
    And             reduce using rule 63 (equality -> equality Equal relational .)
    Question        reduce using rule 63 (equality -> equality Equal relational .)
    Or              reduce using rule 63 (equality -> equality Equal relational .)
    Semi            reduce using rule 63 (equality -> equality Equal relational .)
    RParen          reduce using rule 63 (equality -> equality Equal relational .)
    Comma           reduce using rule 63 (equality -> equality Equal relational .)
    Colon           reduce using rule 63 (equality -> equality Equal relational .)
    Less            shift and go to state 83
    Greater         shift and go to state 84
    LessEqual       shift and go to state 85
    GreaterEqual    shift and go to state 86


state 120

    (64) relational -> relational Less additive .
    (68) additive -> additive . Plus multiplicative
    (69) additive -> additive . Minus multiplicative

    Less            reduce using rule 64 (relational -> relational Less additive .)
    Greater         reduce using rule 64 (relational -> relational Less additive .)
    LessEqual       reduce using rule 64 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 64 (relational -> relational Less additive .)
    NotEqual        reduce using rule 64 (relational -> relational Less additive .)
    Equal           reduce using rule 64 (relational -> relational Less additive .)
    BitAnd          reduce using rule 64 (relational -> relational Less additive .)
    Xor             reduce using rule 64 (relational -> relational Less additive .)
    BitOr           reduce using rule 64 (relational -> relational Less additive .)
    And             reduce using rule 64 (relational -> relational Less additive .)
    Question        reduce using rule 64 (relational -> relational Less additive .)
    Or              reduce using rule 64 (relational -> relational Less additive .)
    Semi            reduce using rule 64 (relational -> relational Less additive .)
    RParen          reduce using rule 64 (relational -> relational Less additive .)
    Comma           reduce using rule 64 (relational -> relational Less additive .)
    Colon           reduce using rule 64 (relational -> relational Less additive .)
    Plus            shift and go to state 87
    Minus           shift and go to state 88


state 121

    (65) relational -> relational Greater additive .
    (68) additive -> additive . Plus multiplicative
    (69) additive -> additive . Minus multiplicative

    Less            reduce using rule 65 (relational -> relational Greater additive .)
    Greater         reduce using rule 65 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 65 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 65 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 65 (relational -> relational Greater additive .)
    Equal           reduce using rule 65 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 65 (relational -> relational Greater additive .)
    Xor             reduce using rule 65 (relational -> relational Greater additive .)
    BitOr           reduce using rule 65 (relational -> relational Greater additive .)
    And             reduce using rule 65 (relational -> relational Greater additive .)
    Question        reduce using rule 65 (relational -> relational Greater additive .)
    Or              reduce using rule 65 (relational -> relational Greater additive .)
    Semi            reduce using rule 65 (relational -> relational Greater additive .)
    RParen          reduce using rule 65 (relational -> relational Greater additive .)
    Comma           reduce using rule 65 (relational -> relational Greater additive .)
    Colon           reduce using rule 65 (relational -> relational Greater additive .)
    Plus            shift and go to state 87
    Minus           shift and go to state 88


state 122

    (66) relational -> relational LessEqual additive .
    (68) additive -> additive . Plus multiplicative
    (69) additive -> additive . Minus multiplicative

    Less            reduce using rule 66 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 66 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 66 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 66 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 66 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 66 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 66 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 66 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 66 (relational -> relational LessEqual additive .)
    And             reduce using rule 66 (relational -> relational LessEqual additive .)
    Question        reduce using rule 66 (relational -> relational LessEqual additive .)
    Or              reduce using rule 66 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 66 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 66 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 66 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 66 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 87
    Minus           shift and go to state 88


state 123

    (67) relational -> relational GreaterEqual additive .
    (68) additive -> additive . Plus multiplicative
    (69) additive -> additive . Minus multiplicative

    Less            reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 67 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 67 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 67 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 67 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 67 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 67 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 67 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 67 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 87
    Minus           shift and go to state 88


state 124

    (68) additive -> additive Plus multiplicative .
    (70) multiplicative -> multiplicative . Mul unary
    (71) multiplicative -> multiplicative . Div unary
    (72) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 68 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 68 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 68 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 68 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 68 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 68 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 68 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 68 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 68 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 68 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 68 (additive -> additive Plus multiplicative .)
    And             reduce using rule 68 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 68 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 68 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 68 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 68 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 68 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 68 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 89
    Div             shift and go to state 90
    Mod             shift and go to state 91


state 125

    (69) additive -> additive Minus multiplicative .
    (70) multiplicative -> multiplicative . Mul unary
    (71) multiplicative -> multiplicative . Div unary
    (72) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 69 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 69 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 69 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 69 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 69 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 69 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 69 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 69 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 69 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 69 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 69 (additive -> additive Minus multiplicative .)
    And             reduce using rule 69 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 69 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 69 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 69 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 69 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 69 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 69 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 89
    Div             shift and go to state 90
    Mod             shift and go to state 91


state 126

    (70) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 70 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 70 (multiplicative -> multiplicative Mul unary .)


state 127

    (71) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 71 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 71 (multiplicative -> multiplicative Div unary .)


state 128

    (72) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 72 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 72 (multiplicative -> multiplicative Mod unary .)


state 129

    (34) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 34 (declaration -> type Identifier Assign expression .)


state 130

    (52) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 52 (postfix -> Identifier LParen expression_list RParen .)


state 131

    (53) expression_list -> expression_list Comma . expression
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 142
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 132

    (16) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (17) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (18) statement_unmatched -> If LParen expression RParen . statement
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (14) statement -> . statement_matched
    (15) statement -> . statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 143
    statement_unmatched            shift and go to state 29
    statement                      shift and go to state 144
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 133

    (19) statement_matched -> While LParen expression RParen . statement_matched
    (20) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 145
    statement_unmatched            shift and go to state 146
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 134

    (21) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (23) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 147
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 135

    (22) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 148
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 136

    (25) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (35) expression -> . assignment
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 149
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 137

    (19) statement_matched -> While LParen expression . RParen statement_matched

    RParen          shift and go to state 150


state 138

    (16) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched

    RParen          shift and go to state 151


state 139

    (21) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 152


state 140

    (22) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 153


state 141

    (73) conditional -> logical_or Question expression Colon . conditional
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Identifier      shift and go to state 93
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    logical_or                     shift and go to state 42
    conditional                    shift and go to state 154
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 142

    (53) expression_list -> expression_list Comma expression .

    RParen          reduce using rule 53 (expression_list -> expression_list Comma expression .)
    Comma           reduce using rule 53 (expression_list -> expression_list Comma expression .)


state 143

    (16) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (17) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (14) statement -> statement_matched .

    Else            shift and go to state 155
    RBrace          reduce using rule 14 (statement -> statement_matched .)
    If              reduce using rule 14 (statement -> statement_matched .)
    While           reduce using rule 14 (statement -> statement_matched .)
    For             reduce using rule 14 (statement -> statement_matched .)
    Do              reduce using rule 14 (statement -> statement_matched .)
    Return          reduce using rule 14 (statement -> statement_matched .)
    LBrace          reduce using rule 14 (statement -> statement_matched .)
    Break           reduce using rule 14 (statement -> statement_matched .)
    Continue        reduce using rule 14 (statement -> statement_matched .)
    Int             reduce using rule 14 (statement -> statement_matched .)
    Identifier      reduce using rule 14 (statement -> statement_matched .)
    Minus           reduce using rule 14 (statement -> statement_matched .)
    BitNot          reduce using rule 14 (statement -> statement_matched .)
    Not             reduce using rule 14 (statement -> statement_matched .)
    Integer         reduce using rule 14 (statement -> statement_matched .)
    LParen          reduce using rule 14 (statement -> statement_matched .)
    Semi            reduce using rule 14 (statement -> statement_matched .)


state 144

    (18) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 18 (statement_unmatched -> If LParen expression RParen statement .)


state 145

    (19) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 19 (statement_matched -> While LParen expression RParen statement_matched .)


state 146

    (20) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 147

    (21) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (23) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 156


state 148

    (22) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 157


state 149

    (25) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 158


state 150

    (19) statement_matched -> While LParen expression RParen . statement_matched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 145
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 151

    (16) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 159
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 152

    (21) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 160
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 153

    (22) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 161
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 154

    (73) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 73 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 73 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 73 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 73 (conditional -> logical_or Question expression Colon conditional .)


state 155

    (16) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (17) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 162
    statement_unmatched            shift and go to state 163
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 156

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (23) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 164
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 157

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 165
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 158

    (25) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 166


state 159

    (16) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched

    Else            shift and go to state 167


state 160

    (21) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 168


state 161

    (22) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 169


state 162

    (16) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 16 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 163

    (17) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 164

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (23) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 170


state 165

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (24) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 171


state 166

    (25) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 25 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 167

    (16) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    expression                     shift and go to state 30
    statement_matched              shift and go to state 162
    opt_expression                 shift and go to state 34
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 168

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 172
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 169

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 173
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 170

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (23) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 34
    statement_matched              shift and go to state 174
    statement_unmatched            shift and go to state 175
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 171

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (24) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (17) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (18) statement_unmatched -> . If LParen expression RParen statement
    (20) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (23) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 31
    While           shift and go to state 32
    For             shift and go to state 33
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 34
    statement_matched              shift and go to state 176
    statement_unmatched            shift and go to state 177
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 172

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 178


state 173

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 179


state 174

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 21 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 175

    (23) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 23 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 176

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 22 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 177

    (24) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 24 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 178

    (21) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 34
    statement_matched              shift and go to state 174
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56

state 179

    (22) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (16) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (19) statement_matched -> . While LParen expression RParen statement_matched
    (21) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (25) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (26) statement_matched -> . Return expression Semi
    (27) statement_matched -> . opt_expression Semi
    (28) statement_matched -> . LBrace block RBrace
    (29) statement_matched -> . Break Semi
    (30) statement_matched -> . Continue Semi
    (31) opt_expression -> . expression
    (32) opt_expression -> . empty
    (35) expression -> . assignment
    (1) empty -> .
    (36) assignment -> . conditional
    (56) assignment -> . Identifier Assign expression
    (37) conditional -> . logical_or
    (73) conditional -> . logical_or Question expression Colon conditional
    (38) logical_or -> . logical_and
    (57) logical_or -> . logical_or Or logical_and
    (39) logical_and -> . bit_or
    (58) logical_and -> . logical_and And bit_or
    (40) bit_or -> . xor
    (59) bit_or -> . bit_or BitOr xor
    (41) xor -> . bit_and
    (60) xor -> . xor Xor bit_and
    (42) bit_and -> . equality
    (61) bit_and -> . bit_and BitAnd equality
    (43) equality -> . relational
    (62) equality -> . equality NotEqual relational
    (63) equality -> . equality Equal relational
    (44) relational -> . additive
    (64) relational -> . relational Less additive
    (65) relational -> . relational Greater additive
    (66) relational -> . relational LessEqual additive
    (67) relational -> . relational GreaterEqual additive
    (45) additive -> . multiplicative
    (68) additive -> . additive Plus multiplicative
    (69) additive -> . additive Minus multiplicative
    (46) multiplicative -> . unary
    (70) multiplicative -> . multiplicative Mul unary
    (71) multiplicative -> . multiplicative Div unary
    (72) multiplicative -> . multiplicative Mod unary
    (47) unary -> . postfix
    (49) unary -> . Minus unary
    (50) unary -> . BitNot unary
    (51) unary -> . Not unary
    (48) postfix -> . primary
    (52) postfix -> . Identifier LParen expression_list RParen
    (74) primary -> . Integer
    (75) primary -> . Identifier
    (76) primary -> . LParen expression RParen

    If              shift and go to state 70
    While           shift and go to state 69
    For             shift and go to state 71
    Do              shift and go to state 35
    Return          shift and go to state 36
    LBrace          shift and go to state 23
    Break           shift and go to state 37
    Continue        shift and go to state 38
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 21
    Minus           shift and go to state 51
    BitNot          shift and go to state 54
    Not             shift and go to state 55
    Integer         shift and go to state 57
    LParen          shift and go to state 22

    opt_expression                 shift and go to state 34
    statement_matched              shift and go to state 176
    expression                     shift and go to state 30
    empty                          shift and go to state 39
    assignment                     shift and go to state 40
    conditional                    shift and go to state 41
    logical_or                     shift and go to state 42
    logical_and                    shift and go to state 43
    bit_or                         shift and go to state 44
    xor                            shift and go to state 45
    bit_and                        shift and go to state 46
    equality                       shift and go to state 47
    relational                     shift and go to state 48
    additive                       shift and go to state 49
    multiplicative                 shift and go to state 50
    unary                          shift and go to state 52
    postfix                        shift and go to state 53
    primary                        shift and go to state 56
